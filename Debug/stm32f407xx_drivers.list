
stm32f407xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800291c  0800291c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800291c  0800291c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800291c  0800291c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000064  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000296c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b2f  00000000  00000000  00022a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000328  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002b0  00000000  00000000  00023870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000041e1  00000000  00000000  00023b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000041c9  00000000  00000000  00027d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c962  00000000  00000000  0002beca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003882c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013e0  00000000  00000000  0003887c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002778 	.word	0x08002778

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002778 	.word	0x08002778

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
//#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <init_systick_timer+0x60>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <init_systick_timer+0x64>)
 800029e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80002a0:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <init_systick_timer+0x68>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0202 	orr.w	r2, r3, #2
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0204 	orr.w	r2, r3, #4
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e014 	.word	0xe000e014
 80002f4:	e000e010 	.word	0xe000e010
 80002f8:	00f42400 	.word	0x00f42400

080002fc <number_to_string>:



void number_to_string(uint8_t num , char* buf)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	2b09      	cmp	r3, #9
 800030c:	d809      	bhi.n	8000322 <number_to_string+0x26>
		buf[0] = '0';
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2230      	movs	r2, #48	; 0x30
 8000312:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	3230      	adds	r2, #48	; 0x30
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 8000320:	e01f      	b.n	8000362 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b09      	cmp	r3, #9
 8000326:	d91c      	bls.n	8000362 <number_to_string+0x66>
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b62      	cmp	r3, #98	; 0x62
 800032c:	d819      	bhi.n	8000362 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <number_to_string+0x74>)
 8000332:	fba2 2303 	umull	r2, r3, r2, r3
 8000336:	08db      	lsrs	r3, r3, #3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	3330      	adds	r3, #48	; 0x30
 800033c:	b2da      	uxtb	r2, r3
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <number_to_string+0x74>)
 8000346:	fba3 1302 	umull	r1, r3, r3, r2
 800034a:	08d9      	lsrs	r1, r3, #3
 800034c:	460b      	mov	r3, r1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	b2da      	uxtb	r2, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	3230      	adds	r2, #48	; 0x30
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	701a      	strb	r2, [r3, #0]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	cccccccd 	.word	0xcccccccd

08000374 <date_to_string>:


char* date_to_string(RTC_date_t *rtc_date)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <date_to_string+0x48>)
 800037e:	222f      	movs	r2, #47	; 0x2f
 8000380:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <date_to_string+0x48>)
 8000384:	222f      	movs	r2, #47	; 0x2f
 8000386:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	490b      	ldr	r1, [pc, #44]	; (80003bc <date_to_string+0x48>)
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffb4 	bl	80002fc <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	785b      	ldrb	r3, [r3, #1]
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <date_to_string+0x4c>)
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffae 	bl	80002fc <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	4907      	ldr	r1, [pc, #28]	; (80003c4 <date_to_string+0x50>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffa8 	bl	80002fc <number_to_string>

	buf[8]= '\0';
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <date_to_string+0x48>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	721a      	strb	r2, [r3, #8]

	return buf;
 80003b2:	4b02      	ldr	r3, [pc, #8]	; (80003bc <date_to_string+0x48>)

}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000094 	.word	0x20000094
 80003c0:	20000097 	.word	0x20000097
 80003c4:	2000009a 	.word	0x2000009a

080003c8 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 80003c8:	b4b0      	push	{r4, r5, r7}
 80003ca:	b08b      	sub	sp, #44	; 0x2c
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <get_day_of_week+0x38>)
 80003d4:	f107 040c 	add.w	r4, r7, #12
 80003d8:	461d      	mov	r5, r3
 80003da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	3328      	adds	r3, #40	; 0x28
 80003ee:	443b      	add	r3, r7
 80003f0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	372c      	adds	r7, #44	; 0x2c
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bcb0      	pop	{r4, r5, r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	080027d4 	.word	0x080027d4

08000404 <time_to_string>:


//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <time_to_string+0x48>)
 800040e:	223a      	movs	r2, #58	; 0x3a
 8000410:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <time_to_string+0x48>)
 8000414:	223a      	movs	r2, #58	; 0x3a
 8000416:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	789b      	ldrb	r3, [r3, #2]
 800041c:	490b      	ldr	r1, [pc, #44]	; (800044c <time_to_string+0x48>)
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff6c 	bl	80002fc <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	4909      	ldr	r1, [pc, #36]	; (8000450 <time_to_string+0x4c>)
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff66 	bl	80002fc <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4907      	ldr	r1, [pc, #28]	; (8000454 <time_to_string+0x50>)
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff60 	bl	80002fc <number_to_string>

	buf[8] = '\0';
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <time_to_string+0x48>)
 800043e:	2200      	movs	r2, #0
 8000440:	721a      	strb	r2, [r3, #8]

	return buf;
 8000442:	4b02      	ldr	r3, [pc, #8]	; (800044c <time_to_string+0x48>)

}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000a0 	.word	0x200000a0
 8000450:	200000a3 	.word	0x200000a3
 8000454:	200000a6 	.word	0x200000a6

08000458 <main>:

int main(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	printf("RTC test \n");
 800045e:	4832      	ldr	r0, [pc, #200]	; (8000528 <main+0xd0>)
 8000460:	f001 fa0c 	bl	800187c <puts>

	if(ds1307_init())
 8000464:	f000 fa84 	bl	8000970 <ds1307_init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d003      	beq.n	8000476 <main+0x1e>
	{
		printf("error while init \n");
 800046e:	482f      	ldr	r0, [pc, #188]	; (800052c <main+0xd4>)
 8000470:	f001 fa04 	bl	800187c <puts>
		while(1);
 8000474:	e7fe      	b.n	8000474 <main+0x1c>
	} else
	{
		printf("successfully init \n");
 8000476:	482e      	ldr	r0, [pc, #184]	; (8000530 <main+0xd8>)
 8000478:	f001 fa00 	bl	800187c <puts>
	}

	init_systick_timer(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f7ff ff07 	bl	8000290 <init_systick_timer>


	current_date.day = FRIDAY;
 8000482:	2306      	movs	r3, #6
 8000484:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000486:	230f      	movs	r3, #15
 8000488:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 800048e:	2315      	movs	r3, #21
 8000490:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000492:	230b      	movs	r3, #11
 8000494:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000496:	233b      	movs	r3, #59	; 0x3b
 8000498:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 800049a:	231e      	movs	r3, #30
 800049c:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 800049e:	2301      	movs	r3, #1
 80004a0:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fb19 	bl	8000adc <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fa82 	bl	80009b8 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fac6 	bl	8000a4a <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fb3b 	bl	8000b3c <ds1307_get_current_date>


	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d012      	beq.n	80004f2 <main+0x9a>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <main+0x7e>
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <main+0xdc>)
 80004d4:	e000      	b.n	80004d8 <main+0x80>
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <main+0xe0>)
 80004d8:	60fb      	str	r3, [r7, #12]
        printf("Current time = %s %s\n",time_to_string(&current_time),am_pm);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff90 	bl	8000404 <time_to_string>
 80004e4:	4603      	mov	r3, r0
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <main+0xe4>)
 80004ec:	f001 f940 	bl	8001770 <iprintf>
 80004f0:	e009      	b.n	8000506 <main+0xae>
	}
	else {
		printf("Current time = %s\n",time_to_string(&current_time));
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff84 	bl	8000404 <time_to_string>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4619      	mov	r1, r3
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0xe8>)
 8000502:	f001 f935 	bl	8001770 <iprintf>
	}


	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff33 	bl	8000374 <date_to_string>
 800050e:	4604      	mov	r4, r0
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff58 	bl	80003c8 <get_day_of_week>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4621      	mov	r1, r4
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0xec>)
 8000520:	f001 f926 	bl	8001770 <iprintf>


	while(1);
 8000524:	e7fe      	b.n	8000524 <main+0xcc>
 8000526:	bf00      	nop
 8000528:	080027f0 	.word	0x080027f0
 800052c:	080027fc 	.word	0x080027fc
 8000530:	08002810 	.word	0x08002810
 8000534:	08002824 	.word	0x08002824
 8000538:	08002828 	.word	0x08002828
 800053c:	0800282c 	.word	0x0800282c
 8000540:	08002844 	.word	0x08002844
 8000544:	08002858 	.word	0x08002858

08000548 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fa79 	bl	8000a4a <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000558:	7afb      	ldrb	r3, [r7, #11]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d012      	beq.n	8000584 <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800055e:	7afb      	ldrb	r3, [r7, #11]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SysTick_Handler+0x20>
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <SysTick_Handler+0x80>)
 8000566:	e000      	b.n	800056a <SysTick_Handler+0x22>
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <SysTick_Handler+0x84>)
 800056a:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ff47 	bl	8000404 <time_to_string>
 8000576:	4603      	mov	r3, r0
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	4619      	mov	r1, r3
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <SysTick_Handler+0x88>)
 800057e:	f001 f8f7 	bl	8001770 <iprintf>
 8000582:	e009      	b.n	8000598 <SysTick_Handler+0x50>

	}else{
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff3b 	bl	8000404 <time_to_string>
 800058e:	4603      	mov	r3, r0
 8000590:	4619      	mov	r1, r3
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <SysTick_Handler+0x8c>)
 8000594:	f001 f8ec 	bl	8001770 <iprintf>

	}

	ds1307_get_current_date(&current_date);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f000 face 	bl	8000b3c <ds1307_get_current_date>

	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fee6 	bl	8000374 <date_to_string>
 80005a8:	4604      	mov	r4, r0
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff0b 	bl	80003c8 <get_day_of_week>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4621      	mov	r1, r4
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <SysTick_Handler+0x90>)
 80005ba:	f001 f8d9 	bl	8001770 <iprintf>

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08002824 	.word	0x08002824
 80005cc:	08002828 	.word	0x08002828
 80005d0:	0800282c 	.word	0x0800282c
 80005d4:	08002844 	.word	0x08002844
 80005d8:	08002858 	.word	0x08002858

080005dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <ITM_SendChar+0x48>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <ITM_SendChar+0x48>)
 80005ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <ITM_SendChar+0x4c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <ITM_SendChar+0x4c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005fe:	bf00      	nop
 8000600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f8      	beq.n	8000600 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800060e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000edfc 	.word	0xe000edfc
 8000628:	e0000e00 	.word	0xe0000e00

0800062c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00a      	b.n	8000654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800063e:	f3af 8000 	nop.w
 8000642:	4601      	mov	r1, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	b2ca      	uxtb	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf0      	blt.n	800063e <_read+0x12>
  }

  return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffab 	bl	80005dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
  }
  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_close>:

int _close(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c6:	605a      	str	r2, [r3, #4]
  return 0;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_isatty>:

int _isatty(int file)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <_sbrk+0x5c>)
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <_sbrk+0x60>)
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <_sbrk+0x64>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <_sbrk+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	429a      	cmp	r2, r3
 8000736:	d207      	bcs.n	8000748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000738:	f000 ffe8 	bl	800170c <__errno>
 800073c:	4603      	mov	r3, r0
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000746:	e009      	b.n	800075c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <_sbrk+0x64>)
 8000758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20020000 	.word	0x20020000
 8000768:	00000400 	.word	0x00000400
 800076c:	200000ac 	.word	0x200000ac
 8000770:	200000e0 	.word	0x200000e0

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f000 ffb9 	bl	8001718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fe57 	bl	8000458 <main>

080007aa <LoopForever>:

LoopForever:
  b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007b8:	08002924 	.word	0x08002924
  ldr r2, =_sbss
 80007bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007c0:	200000dc 	.word	0x200000dc

080007c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>
	...

080007c8 <binary_to_bcd>:

I2C_Handle_t g_ds1307I2cHandle;


static uint8_t binary_to_bcd(uint8_t value)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b09      	cmp	r3, #9
 80007da:	d918      	bls.n	800080e <binary_to_bcd+0x46>
	{
		m = value /10;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <binary_to_bcd+0x54>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <binary_to_bcd+0x54>)
 80007ec:	fba3 1302 	umull	r1, r3, r3, r2
 80007f0:	08d9      	lsrs	r1, r3, #3
 80007f2:	460b      	mov	r3, r1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b25a      	sxtb	r2, r3
 8000804:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	cccccccd 	.word	0xcccccccd

08000820 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	091b      	lsrs	r3, r3, #4
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	4413      	add	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	4413      	add	r3, r2
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <ds1307_i2c_pin_config>:


static void ds1307_i2c_pin_config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	220c      	movs	r2, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ff7a 	bl	8001760 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 800086c:	463b      	mov	r3, r7
 800086e:	220c      	movs	r2, #12
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ff74 	bl	8001760 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <ds1307_i2c_pin_config+0x74>)
 800087a:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000880:	2302      	movs	r3, #2
 8000882:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000884:	2307      	movs	r3, #7
 8000886:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000888:	2301      	movs	r3, #1
 800088a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800088c:	2301      	movs	r3, #1
 800088e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000890:	2302      	movs	r3, #2
 8000892:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f983 	bl	8000ba4 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <ds1307_i2c_pin_config+0x74>)
 80008a0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80008a2:	2304      	movs	r3, #4
 80008a4:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80008a6:	2302      	movs	r3, #2
 80008a8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80008aa:	2306      	movs	r3, #6
 80008ac:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80008ae:	2301      	movs	r3, #1
 80008b0:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008b6:	2302      	movs	r3, #2
 80008b8:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 80008ba:	463b      	mov	r3, r7
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f971 	bl	8000ba4 <GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020400 	.word	0x40020400

080008d0 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <ds1307_i2c_config+0x20>)
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ds1307_i2c_config+0x24>)
 80008d8:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <ds1307_i2c_config+0x20>)
 80008dc:	2201      	movs	r2, #1
 80008de:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <ds1307_i2c_config+0x20>)
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <ds1307_i2c_config+0x28>)
 80008e4:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <ds1307_i2c_config+0x20>)
 80008e8:	f000 fcd6 	bl	8001298 <I2C_Init>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000b0 	.word	0x200000b0
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af02      	add	r7, sp, #8
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000914:	f107 010c 	add.w	r1, r7, #12
 8000918:	2300      	movs	r3, #0
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2368      	movs	r3, #104	; 0x68
 800091e:	2202      	movs	r2, #2
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <ds1307_write+0x34>)
 8000922:	f000 fd9b 	bl	800145c <I2C_MasterSendData>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000b0 	.word	0x200000b0

08000934 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af02      	add	r7, sp, #8
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800093e:	1df9      	adds	r1, r7, #7
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2368      	movs	r3, #104	; 0x68
 8000946:	2201      	movs	r2, #1
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <ds1307_read+0x38>)
 800094a:	f000 fd87 	bl	800145c <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800094e:	f107 010f 	add.w	r1, r7, #15
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2368      	movs	r3, #104	; 0x68
 8000958:	2201      	movs	r2, #1
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <ds1307_read+0x38>)
 800095c:	f000 fde1 	bl	8001522 <I2C_MasterReceiveData>

    return data;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000b0 	.word	0x200000b0

08000970 <ds1307_init>:



uint8_t ds1307_init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	//1. init the i2c pins
	ds1307_i2c_pin_config();
 8000976:	f7ff ff6f 	bl	8000858 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 800097a:	f7ff ffa9 	bl	80008d0 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800097e:	2101      	movs	r1, #1
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <ds1307_init+0x40>)
 8000982:	f000 fc14 	bl	80011ae <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ffb7 	bl	80008fc <ds1307_write>

		//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ffd0 	bl	8000934 <ds1307_read>
 8000994:	4603      	mov	r3, r0
 8000996:	71fb      	strb	r3, [r7, #7]

	printf("Clock state is %d:",clock_state);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <ds1307_init+0x44>)
 800099e:	f000 fee7 	bl	8001770 <iprintf>

	return ((clock_state >> 7 ) & 0x1);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	09db      	lsrs	r3, r3, #7
 80009a6:	b2db      	uxtb	r3, r3

}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40005400 	.word	0x40005400
 80009b4:	08002870 	.word	0x08002870

080009b8 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff feff 	bl	80007c8 <binary_to_bcd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009d4:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff8e 	bl	80008fc <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff feef 	bl	80007c8 <binary_to_bcd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff84 	bl	80008fc <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	789b      	ldrb	r3, [r3, #2]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fee5 	bl	80007c8 <binary_to_bcd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	78db      	ldrb	r3, [r3, #3]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d104      	bne.n	8000a14 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e011      	b.n	8000a38 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1a:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	78db      	ldrb	r3, [r3, #3]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d104      	bne.n	8000a2e <ds1307_set_current_time+0x76>
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	e003      	b.n	8000a36 <ds1307_set_current_time+0x7e>
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	f023 0320 	bic.w	r3, r3, #32
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <ds1307_write>

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ff6e 	bl	8000934 <ds1307_read>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a62:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000a64:	7bbb      	ldrb	r3, [r7, #14]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff feda 	bl	8000820 <bcd_to_binary>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff ff5d 	bl	8000934 <ds1307_read>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fecf 	bl	8000820 <bcd_to_binary>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff52 	bl	8000934 <ds1307_read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00f      	beq.n	8000abe <ds1307_get_current_time+0x74>
				//12 hr format
	rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	70da      	strb	r2, [r3, #3]
	hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e002      	b.n	8000ac4 <ds1307_get_current_time+0x7a>

	}
	else
	{
				//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff feaa 	bl	8000820 <bcd_to_binary>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	709a      	strb	r2, [r3, #2]

}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ds1307_set_current_date>:


void ds1307_set_current_date(RTC_date_t *rtc_date){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe6d 	bl	80007c8 <binary_to_bcd>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2104      	movs	r1, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff02 	bl	80008fc <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe63 	bl	80007c8 <binary_to_bcd>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2105      	movs	r1, #5
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fef8 	bl	80008fc <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe59 	bl	80007c8 <binary_to_bcd>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2106      	movs	r1, #6
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff feee 	bl	80008fc <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe4f 	bl	80007c8 <binary_to_bcd>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fee4 	bl	80008fc <ds1307_write>

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <ds1307_get_current_date>:



void ds1307_get_current_date(RTC_date_t *rtc_date){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000b44:	2003      	movs	r0, #3
 8000b46:	f7ff fef5 	bl	8000934 <ds1307_read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe67 	bl	8000820 <bcd_to_binary>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000b5a:	2004      	movs	r0, #4
 8000b5c:	f7ff feea 	bl	8000934 <ds1307_read>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe5c 	bl	8000820 <bcd_to_binary>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000b70:	2005      	movs	r0, #5
 8000b72:	f7ff fedf 	bl	8000934 <ds1307_read>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe51 	bl	8000820 <bcd_to_binary>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000b86:	2006      	movs	r0, #6
 8000b88:	f7ff fed4 	bl	8000934 <ds1307_read>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe46 	bl	8000820 <bcd_to_binary>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	709a      	strb	r2, [r3, #2]

}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <GPIO_Init>:

#include "stm32f407xx_gpio_driver.h"



void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]


	uint32_t temp = 0; //temp register
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]


	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f98e 	bl	8000ed8 <GPIO_PeriClockControl>

	//printf("GPIO_MODE Set  MODE : %d, PIN No: %d \n",pGPIOHandle->GPIO_PinConfig.GPIO_PinMode,pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	795b      	ldrb	r3, [r3, #5]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d820      	bhi.n	8000c06 <GPIO_Init+0x62>
	{

			//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2103      	movs	r1, #3
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e0c1      	b.n	8000d8a <GPIO_Init+0x1e6>

	} else {
		// configuring the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	795b      	ldrb	r3, [r3, #5]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d117      	bne.n	8000c3e <GPIO_Init+0x9a>
		{
			// configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <GPIO_Init+0x188>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	7912      	ldrb	r2, [r2, #4]
 8000c16:	4611      	mov	r1, r2
 8000c18:	2201      	movs	r2, #1
 8000c1a:	408a      	lsls	r2, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <GPIO_Init+0x188>)
 8000c20:	430b      	orrs	r3, r1
 8000c22:	60d3      	str	r3, [r2, #12]
			// clear RTST
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c24:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <GPIO_Init+0x188>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	7912      	ldrb	r2, [r2, #4]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	2201      	movs	r2, #1
 8000c30:	408a      	lsls	r2, r1
 8000c32:	43d2      	mvns	r2, r2
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <GPIO_Init+0x188>)
 8000c38:	400b      	ands	r3, r1
 8000c3a:	6093      	str	r3, [r2, #8]
 8000c3c:	e035      	b.n	8000caa <GPIO_Init+0x106>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	795b      	ldrb	r3, [r3, #5]
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d117      	bne.n	8000c76 <GPIO_Init+0xd2>
		{
			// configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <GPIO_Init+0x188>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	7912      	ldrb	r2, [r2, #4]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	2201      	movs	r2, #1
 8000c52:	408a      	lsls	r2, r1
 8000c54:	4611      	mov	r1, r2
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <GPIO_Init+0x188>)
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
			// clear FTST
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <GPIO_Init+0x188>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	7912      	ldrb	r2, [r2, #4]
 8000c64:	4611      	mov	r1, r2
 8000c66:	2201      	movs	r2, #1
 8000c68:	408a      	lsls	r2, r1
 8000c6a:	43d2      	mvns	r2, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <GPIO_Init+0x188>)
 8000c70:	400b      	ands	r3, r1
 8000c72:	60d3      	str	r3, [r2, #12]
 8000c74:	e019      	b.n	8000caa <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	795b      	ldrb	r3, [r3, #5]
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d115      	bne.n	8000caa <GPIO_Init+0x106>
		{
			// configure both FTSR and RTSR
			// configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <GPIO_Init+0x188>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7912      	ldrb	r2, [r2, #4]
 8000c86:	4611      	mov	r1, r2
 8000c88:	2201      	movs	r2, #1
 8000c8a:	408a      	lsls	r2, r1
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <GPIO_Init+0x188>)
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6093      	str	r3, [r2, #8]
			// clear RTST
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <GPIO_Init+0x188>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	7912      	ldrb	r2, [r2, #4]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	408a      	lsls	r2, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <GPIO_Init+0x188>)
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	60d3      	str	r3, [r2, #12]
		}

		//2 configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <GPIO_Init+0x18c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d044      	beq.n	8000d50 <GPIO_Init+0x1ac>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <GPIO_Init+0x190>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d02b      	beq.n	8000d28 <GPIO_Init+0x184>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <GPIO_Init+0x194>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d024      	beq.n	8000d24 <GPIO_Init+0x180>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <GPIO_Init+0x198>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d01d      	beq.n	8000d20 <GPIO_Init+0x17c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <GPIO_Init+0x19c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d016      	beq.n	8000d1c <GPIO_Init+0x178>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <GPIO_Init+0x1a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00f      	beq.n	8000d18 <GPIO_Init+0x174>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <GPIO_Init+0x1a4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d008      	beq.n	8000d14 <GPIO_Init+0x170>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <GPIO_Init+0x1a8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <GPIO_Init+0x16c>
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	e020      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d10:	2300      	movs	r3, #0
 8000d12:	e01e      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d14:	2306      	movs	r3, #6
 8000d16:	e01c      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d18:	2305      	movs	r3, #5
 8000d1a:	e01a      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e018      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e016      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e014      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e012      	b.n	8000d52 <GPIO_Init+0x1ae>
 8000d2c:	40013c00 	.word	0x40013c00
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020400 	.word	0x40020400
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40021400 	.word	0x40021400
 8000d48:	40021800 	.word	0x40021800
 8000d4c:	40021c00 	.word	0x40021c00
 8000d50:	2300      	movs	r3, #0
 8000d52:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <GPIO_Init+0x328>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <GPIO_Init+0x328>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000d60:	7c7a      	ldrb	r2, [r7, #17]
 8000d62:	7cbb      	ldrb	r3, [r7, #18]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f103 	lsl.w	r1, r2, r3
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <GPIO_Init+0x32c>)
 8000d6c:	7cfb      	ldrb	r3, [r7, #19]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 enable the EXTI interrupt delivery using IMR

		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d74:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <GPIO_Init+0x330>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	7912      	ldrb	r2, [r2, #4]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a53      	ldr	r2, [pc, #332]	; (8000ed4 <GPIO_Init+0x330>)
 8000d86:	430b      	orrs	r3, r1
 8000d88:	6013      	str	r3, [r2, #0]

	}

	//2. configure the speed
	temp = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	799b      	ldrb	r3, [r3, #6]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2103      	movs	r1, #3
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	400a      	ands	r2, r1
 8000dbc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6899      	ldr	r1, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	609a      	str	r2, [r3, #8]

		//3. configure the pupd settings
	temp = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	79db      	ldrb	r3, [r3, #7]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	791b      	ldrb	r3, [r3, #4]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	791b      	ldrb	r3, [r3, #4]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2103      	movs	r1, #3
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	400a      	ands	r2, r1
 8000e00:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68d9      	ldr	r1, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	60da      	str	r2, [r3, #12]


		//4. configure the optype
	temp = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a1b      	ldrb	r3, [r3, #8]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	4619      	mov	r1, r3
 8000e32:	2301      	movs	r3, #1
 8000e34:	408b      	lsls	r3, r1
 8000e36:	43db      	mvns	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	400a      	ands	r2, r1
 8000e40:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
	temp = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d131      	bne.n	8000ec2 <GPIO_Init+0x31e>
	{
			//configure the alt function registers.

		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	7c3a      	ldrb	r2, [r7, #16]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	7c3a      	ldrb	r2, [r7, #16]
 8000e90:	4001      	ands	r1, r0
 8000e92:	3208      	adds	r2, #8
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	7c3a      	ldrb	r2, [r7, #16]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a5b      	ldrb	r3, [r3, #9]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7c3a      	ldrb	r2, [r7, #16]
 8000eba:	4301      	orrs	r1, r0
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <GPIO_PeriClockControl>:
}



void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t isEnable)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]

	//printf("RCC address: %p \n",RCC);
	//printf("RCC-> AHB1ENR address: %p \n",&(RCC->AHB1ENR));

	if(isEnable == ENABLE) {
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d162      	bne.n	8000fb0 <GPIO_PeriClockControl+0xd8>

		if(pGPIOx == GPIOA) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a64      	ldr	r2, [pc, #400]	; (8001080 <GPIO_PeriClockControl+0x1a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d106      	bne.n	8000f00 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000ef2:	4b64      	ldr	r3, [pc, #400]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a63      	ldr	r2, [pc, #396]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 8000efe:	e0b9      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a61      	ldr	r2, [pc, #388]	; (8001088 <GPIO_PeriClockControl+0x1b0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d106      	bne.n	8000f16 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a5d      	ldr	r2, [pc, #372]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f14:	e0ae      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a5c      	ldr	r2, [pc, #368]	; (800108c <GPIO_PeriClockControl+0x1b4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d106      	bne.n	8000f2c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f1e:	4b59      	ldr	r3, [pc, #356]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a58      	ldr	r2, [pc, #352]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f2a:	e0a3      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a58      	ldr	r2, [pc, #352]	; (8001090 <GPIO_PeriClockControl+0x1b8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d106      	bne.n	8000f42 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f40:	e098      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a53      	ldr	r2, [pc, #332]	; (8001094 <GPIO_PeriClockControl+0x1bc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d106      	bne.n	8000f58 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f4a:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f56:	e08d      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
	    }else if(pGPIOx == GPIOF) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <GPIO_PeriClockControl+0x1c0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000f60:	4b48      	ldr	r3, [pc, #288]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a47      	ldr	r2, [pc, #284]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f6c:	e082      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <GPIO_PeriClockControl+0x1c4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f82:	e077      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <GPIO_PeriClockControl+0x1c8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d106      	bne.n	8000f9a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a3c      	ldr	r2, [pc, #240]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f98:	e06c      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <GPIO_PeriClockControl+0x1cc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d168      	bne.n	8001074 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a37      	ldr	r2, [pc, #220]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fae:	e061      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a33      	ldr	r2, [pc, #204]	; (8001080 <GPIO_PeriClockControl+0x1a8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d106      	bne.n	8000fc6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a31      	ldr	r2, [pc, #196]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc4:	e056      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <GPIO_PeriClockControl+0x1b0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fd4:	f023 0302 	bic.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fda:	e04b      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a2b      	ldr	r2, [pc, #172]	; (800108c <GPIO_PeriClockControl+0x1b4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000fea:	f023 0304 	bic.w	r3, r3, #4
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff0:	e040      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <GPIO_PeriClockControl+0x1b8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d106      	bne.n	8001008 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001000:	f023 0308 	bic.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001006:	e035      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <GPIO_PeriClockControl+0x1bc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001016:	f023 0310 	bic.w	r3, r3, #16
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101c:	e02a      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <GPIO_PeriClockControl+0x1c0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 800102c:	f023 0320 	bic.w	r3, r3, #32
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001032:	e01f      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <GPIO_PeriClockControl+0x1c4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d106      	bne.n	800104a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001048:	e014      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <GPIO_PeriClockControl+0x1c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d106      	bne.n	8001060 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 8001058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105e:	e009      	b.n	8001074 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <GPIO_PeriClockControl+0x1cc>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d105      	bne.n	8001074 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <GPIO_PeriClockControl+0x1ac>)
 800106e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40020000 	.word	0x40020000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40022000 	.word	0x40022000

080010a8 <I2C_GenerateStartCondition>:

//uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
//uint16_t APB1_PreScaler[4] = {2,4,8,16};

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	// 0 = write
	// 1 = Read
	SlaveAddr = SlaveAddr << 1;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800112e:	78fa      	ldrb	r2, [r7, #3]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <I2C_ClearADDRFlag>:



static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
		//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01f      	beq.n	8001196 <I2C_ClearADDRFlag+0x56>
	{
			//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7d9b      	ldrb	r3, [r3, #22]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d112      	bne.n	8001184 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e1b      	ldrb	r3, [r3, #24]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11f      	bne.n	80011a6 <I2C_ClearADDRFlag+0x66>
			{
					//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f959 	bl	8001424 <I2C_ManageAcking>

					//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR1;
			dummy_read = pI2CHandle->pI2Cx->SR2;
			(void)dummy_read;
	}

}
 8001182:	e010      	b.n	80011a6 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	60fb      	str	r3, [r7, #12]
}
 8001194:	e007      	b.n	80011a6 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	60fb      	str	r3, [r7, #12]
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <I2C_PeripheralControl>:



void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 80011cc:	e005      	b.n	80011da <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0201 	bic.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d120      	bne.n	800123c <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <I2C_PeriClockControl+0xa0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d106      	bne.n	8001210 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}
	}

}
 800120e:	e035      	b.n	800127c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <I2C_PeriClockControl+0xa8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d106      	bne.n	8001226 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <I2C_PeriClockControl+0xa4>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <I2C_PeriClockControl+0xa4>)
 800121e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001224:	e02a      	b.n	800127c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <I2C_PeriClockControl+0xac>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d126      	bne.n	800127c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a16      	ldr	r2, [pc, #88]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
}
 800123a:	e01f      	b.n	800127c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <I2C_PeriClockControl+0xa0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d106      	bne.n	8001252 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a10      	ldr	r2, [pc, #64]	; (800128c <I2C_PeriClockControl+0xa4>)
 800124a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001250:	e014      	b.n	800127c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <I2C_PeriClockControl+0xa8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d106      	bne.n	8001268 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <I2C_PeriClockControl+0xa4>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001260:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001266:	e009      	b.n	800127c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <I2C_PeriClockControl+0xac>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d105      	bne.n	800127c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <I2C_PeriClockControl+0xa4>)
 8001276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40005400 	.word	0x40005400
 800128c:	40023800 	.word	0x40023800
 8001290:	40005800 	.word	0x40005800
 8001294:	40005c00 	.word	0x40005c00

08001298 <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	uint32_t tempRegister = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]

	//clock control
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff9c 	bl	80011e8 <I2C_PeriClockControl>
	// Ack bit control

	tempRegister |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7a5b      	ldrb	r3, [r3, #9]
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempRegister;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]

	tempRegister = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]

	// FREQ field of CR2;
	tempRegister |= RCC_GetPCLK1Value() / 1000000U;
 80012ca:	f000 f9c5 	bl	8001658 <RCC_GetPCLK1Value>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <I2C_Init+0x158>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempRegister & 0x3F);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012e8:	605a      	str	r2, [r3, #4]

	// Configure device own address
	tempRegister = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
	tempRegister = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
	tempRegister |= (1 << 14);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempRegister;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	609a      	str	r2, [r3, #8]

	//CCR Calculation
	uint16_t ccr_value = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	817b      	strh	r3, [r7, #10]
	tempRegister = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a38      	ldr	r2, [pc, #224]	; (80013f4 <I2C_Init+0x15c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d80f      	bhi.n	8001338 <I2C_Init+0xa0>
	{
		// mode is standard
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001318:	f000 f99e 	bl	8001658 <RCC_GetPCLK1Value>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	817b      	strh	r3, [r7, #10]
		tempRegister |= (ccr_value & 0xFFF);
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e02d      	b.n	8001394 <I2C_Init+0xfc>
	}
	else {
		// mode is fast
		tempRegister |= (1 << 15);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133e:	60fb      	str	r3, [r7, #12]
		tempRegister |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7a9b      	ldrb	r3, [r3, #10]
 8001344:	039b      	lsls	r3, r3, #14
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a9b      	ldrb	r3, [r3, #10]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10b      	bne.n	800136e <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001356:	f000 f97f 	bl	8001658 <RCC_GetPCLK1Value>
 800135a:	4601      	mov	r1, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	fbb1 f3f3 	udiv	r3, r1, r3
 800136a:	817b      	strh	r3, [r7, #10]
 800136c:	e00c      	b.n	8001388 <I2C_Init+0xf0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800136e:	f000 f973 	bl	8001658 <RCC_GetPCLK1Value>
 8001372:	4601      	mov	r1, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009a      	lsls	r2, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	fbb1 f3f3 	udiv	r3, r1, r3
 8001386:	817b      	strh	r3, [r7, #10]
		}
		tempRegister |= (ccr_value & 0xFFF);
 8001388:	897b      	ldrh	r3, [r7, #10]
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempRegister;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	61da      	str	r2, [r3, #28]

	tempRegister = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <I2C_Init+0x15c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d809      	bhi.n	80013be <I2C_Init+0x126>
	{
		//mode is standard mode max rise time 1000 ns
		//  rise time =  T rise / T pclk1 + 1 = Fpclk1 * T rise +1  = Fpclk/ Frise + 1
		tempRegister = (RCC_GetPCLK1Value() / 1000000U) + 1 ;
 80013aa:	f000 f955 	bl	8001658 <RCC_GetPCLK1Value>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <I2C_Init+0x158>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e00d      	b.n	80013da <I2C_Init+0x142>

	}else
	{
		//mode is fast mode max time 300ns
		tempRegister = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80013be:	f000 f94b 	bl	8001658 <RCC_GetPCLK1Value>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	0a5b      	lsrs	r3, r3, #9
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <I2C_Init+0x160>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	09db      	lsrs	r3, r3, #7
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempRegister & 0x3F);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013e4:	621a      	str	r2, [r3, #32]


}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	000186a0 	.word	0x000186a0
 80013f8:	00044b83 	.word	0x00044b83

080013fc <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d106      	bne.n	8001444 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8001442:	e005      	b.n	8001450 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe1a 	bl	80010a8 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8001474:	bf00      	nop
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffbd 	bl	80013fc <I2C_GetFlagStatus>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f6      	beq.n	8001476 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe29 	bl	80010e8 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8001496:	bf00      	nop
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffac 	bl	80013fc <I2C_GetFlagStatus>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f6      	beq.n	8001498 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7ff fe48 	bl	8001140 <I2C_ClearADDRFlag>


	//6. send the data until len becomes 0

	while(Len > 0)
 80014b0:	e014      	b.n	80014dc <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80014b2:	bf00      	nop
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff9e 	bl	80013fc <I2C_GetFlagStatus>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f6      	beq.n	80014b4 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
		Len--;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e7      	bne.n	80014b2 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 80014e2:	bf00      	nop
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff86 	bl	80013fc <I2C_GetFlagStatus>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f6      	beq.n	80014e4 <I2C_MasterSendData+0x88>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 80014f6:	bf00      	nop
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2104      	movs	r1, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff7c 	bl	80013fc <I2C_GetFlagStatus>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f6      	beq.n	80014f8 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800150a:	7e3b      	ldrb	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <I2C_MasterSendData+0xbe>
	       I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fdd7 	bl	80010c8 <I2C_GenerateStopCondition>


}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	4611      	mov	r1, r2
 800152e:	461a      	mov	r2, r3
 8001530:	460b      	mov	r3, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fdb3 	bl	80010a8 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8001542:	bf00      	nop
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff56 	bl	80013fc <I2C_GetFlagStatus>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f6      	beq.n	8001544 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	79ba      	ldrb	r2, [r7, #6]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fdd8 	bl	8001114 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8001564:	bf00      	nop
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff45 	bl	80013fc <I2C_GetFlagStatus>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f6      	beq.n	8001566 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d121      	bne.n	80015c2 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff4d 	bl	8001424 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff fdd8 	bl	8001140 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001590:	bf00      	nop
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff2f 	bl	80013fc <I2C_GetFlagStatus>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f6      	beq.n	8001592 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80015a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd89 	bl	80010c8 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d930      	bls.n	800162a <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fdb9 	bl	8001140 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e027      	b.n	8001624 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80015d4:	bf00      	nop
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff0d 	bl	80013fc <I2C_GetFlagStatus>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f6      	beq.n	80015d6 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d10e      	bne.n	800160c <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff15 	bl	8001424 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 80015fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d104      	bne.n	800160c <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd5e 	bl	80010c8 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	3301      	adds	r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3b01      	subs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1d4      	bne.n	80015d4 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	7a5b      	ldrb	r3, [r3, #9]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fef3 	bl	8001424 <I2C_ManageAcking>
	}

}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <RCC_GetPLLOutputClock>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t  RCC_GetPLLOutputClock()
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

	return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
	uint32_t pclk1,systemClk;
	uint16_t ahbpScaler;
	uint8_t clksrc,apb1Scaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <RCC_GetPCLK1Value+0xa0>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	723b      	strb	r3, [r7, #8]

	if(clksrc == 0)
 800166c:	7a3b      	ldrb	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <RCC_GetPCLK1Value+0x20>
	{
		systemClk = 16000000;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <RCC_GetPCLK1Value+0xa4>)
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e00b      	b.n	8001690 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8001678:	7a3b      	ldrb	r3, [r7, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <RCC_GetPCLK1Value+0x2c>
	{
		systemClk = 8000000;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <RCC_GetPCLK1Value+0xa8>)
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e005      	b.n	8001690 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8001684:	7a3b      	ldrb	r3, [r7, #8]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d102      	bne.n	8001690 <RCC_GetPCLK1Value+0x38>
	{
		systemClk = RCC_GetPLLOutputClock();
 800168a:	f7ff ffdc 	bl	8001646 <RCC_GetPLLOutputClock>
 800168e:	60f8      	str	r0, [r7, #12]
	}

	uint8_t temp;

	// for AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <RCC_GetPCLK1Value+0xa0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	71fb      	strb	r3, [r7, #7]
	if(temp < 8)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	d802      	bhi.n	80016aa <RCC_GetPCLK1Value+0x52>
	{
		ahbpScaler = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	817b      	strh	r3, [r7, #10]
 80016a8:	e005      	b.n	80016b6 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbpScaler = AHB_PreScaler[temp - 8];
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3b08      	subs	r3, #8
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <RCC_GetPCLK1Value+0xac>)
 80016b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b4:	817b      	strh	r3, [r7, #10]
	}

	// for APB1
	temp = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	71fb      	strb	r3, [r7, #7]
	temp = ((RCC->CFGR >> 10) & 0x7);
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <RCC_GetPCLK1Value+0xa0>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0a9b      	lsrs	r3, r3, #10
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	71fb      	strb	r3, [r7, #7]
	if(temp < 4)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d802      	bhi.n	80016d4 <RCC_GetPCLK1Value+0x7c>
	{
		apb1Scaler = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	727b      	strb	r3, [r7, #9]
 80016d2:	e004      	b.n	80016de <RCC_GetPCLK1Value+0x86>
	}
	else
	{
		apb1Scaler = APB1_PreScaler[temp - 4];
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3b04      	subs	r3, #4
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <RCC_GetPCLK1Value+0xb0>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	727b      	strb	r3, [r7, #9]
	}

	pclk1 = (systemClk / ahbpScaler) / apb1Scaler;
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e6:	7a7b      	ldrb	r3, [r7, #9]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	603b      	str	r3, [r7, #0]

	return pclk1;
 80016ee:	683b      	ldr	r3, [r7, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	007a1200 	.word	0x007a1200
 8001704:	20000000 	.word	0x20000000
 8001708:	20000010 	.word	0x20000010

0800170c <__errno>:
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <__errno+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000014 	.word	0x20000014

08001718 <__libc_init_array>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	4d0d      	ldr	r5, [pc, #52]	; (8001750 <__libc_init_array+0x38>)
 800171c:	4c0d      	ldr	r4, [pc, #52]	; (8001754 <__libc_init_array+0x3c>)
 800171e:	1b64      	subs	r4, r4, r5
 8001720:	10a4      	asrs	r4, r4, #2
 8001722:	2600      	movs	r6, #0
 8001724:	42a6      	cmp	r6, r4
 8001726:	d109      	bne.n	800173c <__libc_init_array+0x24>
 8001728:	4d0b      	ldr	r5, [pc, #44]	; (8001758 <__libc_init_array+0x40>)
 800172a:	4c0c      	ldr	r4, [pc, #48]	; (800175c <__libc_init_array+0x44>)
 800172c:	f001 f824 	bl	8002778 <_init>
 8001730:	1b64      	subs	r4, r4, r5
 8001732:	10a4      	asrs	r4, r4, #2
 8001734:	2600      	movs	r6, #0
 8001736:	42a6      	cmp	r6, r4
 8001738:	d105      	bne.n	8001746 <__libc_init_array+0x2e>
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001740:	4798      	blx	r3
 8001742:	3601      	adds	r6, #1
 8001744:	e7ee      	b.n	8001724 <__libc_init_array+0xc>
 8001746:	f855 3b04 	ldr.w	r3, [r5], #4
 800174a:	4798      	blx	r3
 800174c:	3601      	adds	r6, #1
 800174e:	e7f2      	b.n	8001736 <__libc_init_array+0x1e>
 8001750:	0800291c 	.word	0x0800291c
 8001754:	0800291c 	.word	0x0800291c
 8001758:	0800291c 	.word	0x0800291c
 800175c:	08002920 	.word	0x08002920

08001760 <memset>:
 8001760:	4402      	add	r2, r0
 8001762:	4603      	mov	r3, r0
 8001764:	4293      	cmp	r3, r2
 8001766:	d100      	bne.n	800176a <memset+0xa>
 8001768:	4770      	bx	lr
 800176a:	f803 1b01 	strb.w	r1, [r3], #1
 800176e:	e7f9      	b.n	8001764 <memset+0x4>

08001770 <iprintf>:
 8001770:	b40f      	push	{r0, r1, r2, r3}
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <iprintf+0x2c>)
 8001774:	b513      	push	{r0, r1, r4, lr}
 8001776:	681c      	ldr	r4, [r3, #0]
 8001778:	b124      	cbz	r4, 8001784 <iprintf+0x14>
 800177a:	69a3      	ldr	r3, [r4, #24]
 800177c:	b913      	cbnz	r3, 8001784 <iprintf+0x14>
 800177e:	4620      	mov	r0, r4
 8001780:	f000 fa5e 	bl	8001c40 <__sinit>
 8001784:	ab05      	add	r3, sp, #20
 8001786:	9a04      	ldr	r2, [sp, #16]
 8001788:	68a1      	ldr	r1, [r4, #8]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	4620      	mov	r0, r4
 800178e:	f000 fc67 	bl	8002060 <_vfiprintf_r>
 8001792:	b002      	add	sp, #8
 8001794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001798:	b004      	add	sp, #16
 800179a:	4770      	bx	lr
 800179c:	20000014 	.word	0x20000014

080017a0 <_puts_r>:
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	460e      	mov	r6, r1
 80017a4:	4605      	mov	r5, r0
 80017a6:	b118      	cbz	r0, 80017b0 <_puts_r+0x10>
 80017a8:	6983      	ldr	r3, [r0, #24]
 80017aa:	b90b      	cbnz	r3, 80017b0 <_puts_r+0x10>
 80017ac:	f000 fa48 	bl	8001c40 <__sinit>
 80017b0:	69ab      	ldr	r3, [r5, #24]
 80017b2:	68ac      	ldr	r4, [r5, #8]
 80017b4:	b913      	cbnz	r3, 80017bc <_puts_r+0x1c>
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 fa42 	bl	8001c40 <__sinit>
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <_puts_r+0xd0>)
 80017be:	429c      	cmp	r4, r3
 80017c0:	d120      	bne.n	8001804 <_puts_r+0x64>
 80017c2:	686c      	ldr	r4, [r5, #4]
 80017c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d405      	bmi.n	80017d6 <_puts_r+0x36>
 80017ca:	89a3      	ldrh	r3, [r4, #12]
 80017cc:	0598      	lsls	r0, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_puts_r+0x36>
 80017d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d2:	f000 fad3 	bl	8001d7c <__retarget_lock_acquire_recursive>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	0719      	lsls	r1, r3, #28
 80017da:	d51d      	bpl.n	8001818 <_puts_r+0x78>
 80017dc:	6923      	ldr	r3, [r4, #16]
 80017de:	b1db      	cbz	r3, 8001818 <_puts_r+0x78>
 80017e0:	3e01      	subs	r6, #1
 80017e2:	68a3      	ldr	r3, [r4, #8]
 80017e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60a3      	str	r3, [r4, #8]
 80017ec:	bb39      	cbnz	r1, 800183e <_puts_r+0x9e>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da38      	bge.n	8001864 <_puts_r+0xc4>
 80017f2:	4622      	mov	r2, r4
 80017f4:	210a      	movs	r1, #10
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 f848 	bl	800188c <__swbuf_r>
 80017fc:	3001      	adds	r0, #1
 80017fe:	d011      	beq.n	8001824 <_puts_r+0x84>
 8001800:	250a      	movs	r5, #10
 8001802:	e011      	b.n	8001828 <_puts_r+0x88>
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <_puts_r+0xd4>)
 8001806:	429c      	cmp	r4, r3
 8001808:	d101      	bne.n	800180e <_puts_r+0x6e>
 800180a:	68ac      	ldr	r4, [r5, #8]
 800180c:	e7da      	b.n	80017c4 <_puts_r+0x24>
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <_puts_r+0xd8>)
 8001810:	429c      	cmp	r4, r3
 8001812:	bf08      	it	eq
 8001814:	68ec      	ldreq	r4, [r5, #12]
 8001816:	e7d5      	b.n	80017c4 <_puts_r+0x24>
 8001818:	4621      	mov	r1, r4
 800181a:	4628      	mov	r0, r5
 800181c:	f000 f888 	bl	8001930 <__swsetup_r>
 8001820:	2800      	cmp	r0, #0
 8001822:	d0dd      	beq.n	80017e0 <_puts_r+0x40>
 8001824:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800182a:	07da      	lsls	r2, r3, #31
 800182c:	d405      	bmi.n	800183a <_puts_r+0x9a>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	059b      	lsls	r3, r3, #22
 8001832:	d402      	bmi.n	800183a <_puts_r+0x9a>
 8001834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001836:	f000 faa2 	bl	8001d7e <__retarget_lock_release_recursive>
 800183a:	4628      	mov	r0, r5
 800183c:	bd70      	pop	{r4, r5, r6, pc}
 800183e:	2b00      	cmp	r3, #0
 8001840:	da04      	bge.n	800184c <_puts_r+0xac>
 8001842:	69a2      	ldr	r2, [r4, #24]
 8001844:	429a      	cmp	r2, r3
 8001846:	dc06      	bgt.n	8001856 <_puts_r+0xb6>
 8001848:	290a      	cmp	r1, #10
 800184a:	d004      	beq.n	8001856 <_puts_r+0xb6>
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	6022      	str	r2, [r4, #0]
 8001852:	7019      	strb	r1, [r3, #0]
 8001854:	e7c5      	b.n	80017e2 <_puts_r+0x42>
 8001856:	4622      	mov	r2, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f000 f817 	bl	800188c <__swbuf_r>
 800185e:	3001      	adds	r0, #1
 8001860:	d1bf      	bne.n	80017e2 <_puts_r+0x42>
 8001862:	e7df      	b.n	8001824 <_puts_r+0x84>
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	250a      	movs	r5, #10
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	6022      	str	r2, [r4, #0]
 800186c:	701d      	strb	r5, [r3, #0]
 800186e:	e7db      	b.n	8001828 <_puts_r+0x88>
 8001870:	080028a8 	.word	0x080028a8
 8001874:	080028c8 	.word	0x080028c8
 8001878:	08002888 	.word	0x08002888

0800187c <puts>:
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <puts+0xc>)
 800187e:	4601      	mov	r1, r0
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f7ff bf8d 	b.w	80017a0 <_puts_r>
 8001886:	bf00      	nop
 8001888:	20000014 	.word	0x20000014

0800188c <__swbuf_r>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	460e      	mov	r6, r1
 8001890:	4614      	mov	r4, r2
 8001892:	4605      	mov	r5, r0
 8001894:	b118      	cbz	r0, 800189e <__swbuf_r+0x12>
 8001896:	6983      	ldr	r3, [r0, #24]
 8001898:	b90b      	cbnz	r3, 800189e <__swbuf_r+0x12>
 800189a:	f000 f9d1 	bl	8001c40 <__sinit>
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <__swbuf_r+0x98>)
 80018a0:	429c      	cmp	r4, r3
 80018a2:	d12b      	bne.n	80018fc <__swbuf_r+0x70>
 80018a4:	686c      	ldr	r4, [r5, #4]
 80018a6:	69a3      	ldr	r3, [r4, #24]
 80018a8:	60a3      	str	r3, [r4, #8]
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	071a      	lsls	r2, r3, #28
 80018ae:	d52f      	bpl.n	8001910 <__swbuf_r+0x84>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	b36b      	cbz	r3, 8001910 <__swbuf_r+0x84>
 80018b4:	6923      	ldr	r3, [r4, #16]
 80018b6:	6820      	ldr	r0, [r4, #0]
 80018b8:	1ac0      	subs	r0, r0, r3
 80018ba:	6963      	ldr	r3, [r4, #20]
 80018bc:	b2f6      	uxtb	r6, r6
 80018be:	4283      	cmp	r3, r0
 80018c0:	4637      	mov	r7, r6
 80018c2:	dc04      	bgt.n	80018ce <__swbuf_r+0x42>
 80018c4:	4621      	mov	r1, r4
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f926 	bl	8001b18 <_fflush_r>
 80018cc:	bb30      	cbnz	r0, 800191c <__swbuf_r+0x90>
 80018ce:	68a3      	ldr	r3, [r4, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60a3      	str	r3, [r4, #8]
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	6022      	str	r2, [r4, #0]
 80018da:	701e      	strb	r6, [r3, #0]
 80018dc:	6963      	ldr	r3, [r4, #20]
 80018de:	3001      	adds	r0, #1
 80018e0:	4283      	cmp	r3, r0
 80018e2:	d004      	beq.n	80018ee <__swbuf_r+0x62>
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d506      	bpl.n	80018f8 <__swbuf_r+0x6c>
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	d104      	bne.n	80018f8 <__swbuf_r+0x6c>
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f911 	bl	8001b18 <_fflush_r>
 80018f6:	b988      	cbnz	r0, 800191c <__swbuf_r+0x90>
 80018f8:	4638      	mov	r0, r7
 80018fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <__swbuf_r+0x9c>)
 80018fe:	429c      	cmp	r4, r3
 8001900:	d101      	bne.n	8001906 <__swbuf_r+0x7a>
 8001902:	68ac      	ldr	r4, [r5, #8]
 8001904:	e7cf      	b.n	80018a6 <__swbuf_r+0x1a>
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <__swbuf_r+0xa0>)
 8001908:	429c      	cmp	r4, r3
 800190a:	bf08      	it	eq
 800190c:	68ec      	ldreq	r4, [r5, #12]
 800190e:	e7ca      	b.n	80018a6 <__swbuf_r+0x1a>
 8001910:	4621      	mov	r1, r4
 8001912:	4628      	mov	r0, r5
 8001914:	f000 f80c 	bl	8001930 <__swsetup_r>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0cb      	beq.n	80018b4 <__swbuf_r+0x28>
 800191c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001920:	e7ea      	b.n	80018f8 <__swbuf_r+0x6c>
 8001922:	bf00      	nop
 8001924:	080028a8 	.word	0x080028a8
 8001928:	080028c8 	.word	0x080028c8
 800192c:	08002888 	.word	0x08002888

08001930 <__swsetup_r>:
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <__swsetup_r+0xcc>)
 8001932:	b570      	push	{r4, r5, r6, lr}
 8001934:	681d      	ldr	r5, [r3, #0]
 8001936:	4606      	mov	r6, r0
 8001938:	460c      	mov	r4, r1
 800193a:	b125      	cbz	r5, 8001946 <__swsetup_r+0x16>
 800193c:	69ab      	ldr	r3, [r5, #24]
 800193e:	b913      	cbnz	r3, 8001946 <__swsetup_r+0x16>
 8001940:	4628      	mov	r0, r5
 8001942:	f000 f97d 	bl	8001c40 <__sinit>
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <__swsetup_r+0xd0>)
 8001948:	429c      	cmp	r4, r3
 800194a:	d10f      	bne.n	800196c <__swsetup_r+0x3c>
 800194c:	686c      	ldr	r4, [r5, #4]
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001954:	0719      	lsls	r1, r3, #28
 8001956:	d42c      	bmi.n	80019b2 <__swsetup_r+0x82>
 8001958:	06dd      	lsls	r5, r3, #27
 800195a:	d411      	bmi.n	8001980 <__swsetup_r+0x50>
 800195c:	2309      	movs	r3, #9
 800195e:	6033      	str	r3, [r6, #0]
 8001960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001964:	81a3      	strh	r3, [r4, #12]
 8001966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800196a:	e03e      	b.n	80019ea <__swsetup_r+0xba>
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <__swsetup_r+0xd4>)
 800196e:	429c      	cmp	r4, r3
 8001970:	d101      	bne.n	8001976 <__swsetup_r+0x46>
 8001972:	68ac      	ldr	r4, [r5, #8]
 8001974:	e7eb      	b.n	800194e <__swsetup_r+0x1e>
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <__swsetup_r+0xd8>)
 8001978:	429c      	cmp	r4, r3
 800197a:	bf08      	it	eq
 800197c:	68ec      	ldreq	r4, [r5, #12]
 800197e:	e7e6      	b.n	800194e <__swsetup_r+0x1e>
 8001980:	0758      	lsls	r0, r3, #29
 8001982:	d512      	bpl.n	80019aa <__swsetup_r+0x7a>
 8001984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001986:	b141      	cbz	r1, 800199a <__swsetup_r+0x6a>
 8001988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800198c:	4299      	cmp	r1, r3
 800198e:	d002      	beq.n	8001996 <__swsetup_r+0x66>
 8001990:	4630      	mov	r0, r6
 8001992:	f000 fa5b 	bl	8001e4c <_free_r>
 8001996:	2300      	movs	r3, #0
 8001998:	6363      	str	r3, [r4, #52]	; 0x34
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	6063      	str	r3, [r4, #4]
 80019a6:	6923      	ldr	r3, [r4, #16]
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	81a3      	strh	r3, [r4, #12]
 80019b2:	6923      	ldr	r3, [r4, #16]
 80019b4:	b94b      	cbnz	r3, 80019ca <__swsetup_r+0x9a>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c0:	d003      	beq.n	80019ca <__swsetup_r+0x9a>
 80019c2:	4621      	mov	r1, r4
 80019c4:	4630      	mov	r0, r6
 80019c6:	f000 fa01 	bl	8001dcc <__smakebuf_r>
 80019ca:	89a0      	ldrh	r0, [r4, #12]
 80019cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019d0:	f010 0301 	ands.w	r3, r0, #1
 80019d4:	d00a      	beq.n	80019ec <__swsetup_r+0xbc>
 80019d6:	2300      	movs	r3, #0
 80019d8:	60a3      	str	r3, [r4, #8]
 80019da:	6963      	ldr	r3, [r4, #20]
 80019dc:	425b      	negs	r3, r3
 80019de:	61a3      	str	r3, [r4, #24]
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	b943      	cbnz	r3, 80019f6 <__swsetup_r+0xc6>
 80019e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019e8:	d1ba      	bne.n	8001960 <__swsetup_r+0x30>
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
 80019ec:	0781      	lsls	r1, r0, #30
 80019ee:	bf58      	it	pl
 80019f0:	6963      	ldrpl	r3, [r4, #20]
 80019f2:	60a3      	str	r3, [r4, #8]
 80019f4:	e7f4      	b.n	80019e0 <__swsetup_r+0xb0>
 80019f6:	2000      	movs	r0, #0
 80019f8:	e7f7      	b.n	80019ea <__swsetup_r+0xba>
 80019fa:	bf00      	nop
 80019fc:	20000014 	.word	0x20000014
 8001a00:	080028a8 	.word	0x080028a8
 8001a04:	080028c8 	.word	0x080028c8
 8001a08:	08002888 	.word	0x08002888

08001a0c <__sflush_r>:
 8001a0c:	898a      	ldrh	r2, [r1, #12]
 8001a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	4605      	mov	r5, r0
 8001a14:	0710      	lsls	r0, r2, #28
 8001a16:	460c      	mov	r4, r1
 8001a18:	d458      	bmi.n	8001acc <__sflush_r+0xc0>
 8001a1a:	684b      	ldr	r3, [r1, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dc05      	bgt.n	8001a2c <__sflush_r+0x20>
 8001a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc02      	bgt.n	8001a2c <__sflush_r+0x20>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	d0f9      	beq.n	8001a26 <__sflush_r+0x1a>
 8001a32:	2300      	movs	r3, #0
 8001a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a38:	682f      	ldr	r7, [r5, #0]
 8001a3a:	602b      	str	r3, [r5, #0]
 8001a3c:	d032      	beq.n	8001aa4 <__sflush_r+0x98>
 8001a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	075a      	lsls	r2, r3, #29
 8001a44:	d505      	bpl.n	8001a52 <__sflush_r+0x46>
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	1ac0      	subs	r0, r0, r3
 8001a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a4c:	b10b      	cbz	r3, 8001a52 <__sflush_r+0x46>
 8001a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a50:	1ac0      	subs	r0, r0, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4602      	mov	r2, r0
 8001a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a58:	6a21      	ldr	r1, [r4, #32]
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	47b0      	blx	r6
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	d106      	bne.n	8001a72 <__sflush_r+0x66>
 8001a64:	6829      	ldr	r1, [r5, #0]
 8001a66:	291d      	cmp	r1, #29
 8001a68:	d82c      	bhi.n	8001ac4 <__sflush_r+0xb8>
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <__sflush_r+0x108>)
 8001a6c:	40ca      	lsrs	r2, r1
 8001a6e:	07d6      	lsls	r6, r2, #31
 8001a70:	d528      	bpl.n	8001ac4 <__sflush_r+0xb8>
 8001a72:	2200      	movs	r2, #0
 8001a74:	6062      	str	r2, [r4, #4]
 8001a76:	04d9      	lsls	r1, r3, #19
 8001a78:	6922      	ldr	r2, [r4, #16]
 8001a7a:	6022      	str	r2, [r4, #0]
 8001a7c:	d504      	bpl.n	8001a88 <__sflush_r+0x7c>
 8001a7e:	1c42      	adds	r2, r0, #1
 8001a80:	d101      	bne.n	8001a86 <__sflush_r+0x7a>
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	b903      	cbnz	r3, 8001a88 <__sflush_r+0x7c>
 8001a86:	6560      	str	r0, [r4, #84]	; 0x54
 8001a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a8a:	602f      	str	r7, [r5, #0]
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d0ca      	beq.n	8001a26 <__sflush_r+0x1a>
 8001a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a94:	4299      	cmp	r1, r3
 8001a96:	d002      	beq.n	8001a9e <__sflush_r+0x92>
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f9d7 	bl	8001e4c <_free_r>
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8001aa2:	e7c1      	b.n	8001a28 <__sflush_r+0x1c>
 8001aa4:	6a21      	ldr	r1, [r4, #32]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	47b0      	blx	r6
 8001aac:	1c41      	adds	r1, r0, #1
 8001aae:	d1c7      	bne.n	8001a40 <__sflush_r+0x34>
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0c4      	beq.n	8001a40 <__sflush_r+0x34>
 8001ab6:	2b1d      	cmp	r3, #29
 8001ab8:	d001      	beq.n	8001abe <__sflush_r+0xb2>
 8001aba:	2b16      	cmp	r3, #22
 8001abc:	d101      	bne.n	8001ac2 <__sflush_r+0xb6>
 8001abe:	602f      	str	r7, [r5, #0]
 8001ac0:	e7b1      	b.n	8001a26 <__sflush_r+0x1a>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac8:	81a3      	strh	r3, [r4, #12]
 8001aca:	e7ad      	b.n	8001a28 <__sflush_r+0x1c>
 8001acc:	690f      	ldr	r7, [r1, #16]
 8001ace:	2f00      	cmp	r7, #0
 8001ad0:	d0a9      	beq.n	8001a26 <__sflush_r+0x1a>
 8001ad2:	0793      	lsls	r3, r2, #30
 8001ad4:	680e      	ldr	r6, [r1, #0]
 8001ad6:	bf08      	it	eq
 8001ad8:	694b      	ldreq	r3, [r1, #20]
 8001ada:	600f      	str	r7, [r1, #0]
 8001adc:	bf18      	it	ne
 8001ade:	2300      	movne	r3, #0
 8001ae0:	eba6 0807 	sub.w	r8, r6, r7
 8001ae4:	608b      	str	r3, [r1, #8]
 8001ae6:	f1b8 0f00 	cmp.w	r8, #0
 8001aea:	dd9c      	ble.n	8001a26 <__sflush_r+0x1a>
 8001aec:	6a21      	ldr	r1, [r4, #32]
 8001aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001af0:	4643      	mov	r3, r8
 8001af2:	463a      	mov	r2, r7
 8001af4:	4628      	mov	r0, r5
 8001af6:	47b0      	blx	r6
 8001af8:	2800      	cmp	r0, #0
 8001afa:	dc06      	bgt.n	8001b0a <__sflush_r+0xfe>
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	e78e      	b.n	8001a28 <__sflush_r+0x1c>
 8001b0a:	4407      	add	r7, r0
 8001b0c:	eba8 0800 	sub.w	r8, r8, r0
 8001b10:	e7e9      	b.n	8001ae6 <__sflush_r+0xda>
 8001b12:	bf00      	nop
 8001b14:	20400001 	.word	0x20400001

08001b18 <_fflush_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	690b      	ldr	r3, [r1, #16]
 8001b1c:	4605      	mov	r5, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	b913      	cbnz	r3, 8001b28 <_fflush_r+0x10>
 8001b22:	2500      	movs	r5, #0
 8001b24:	4628      	mov	r0, r5
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	b118      	cbz	r0, 8001b32 <_fflush_r+0x1a>
 8001b2a:	6983      	ldr	r3, [r0, #24]
 8001b2c:	b90b      	cbnz	r3, 8001b32 <_fflush_r+0x1a>
 8001b2e:	f000 f887 	bl	8001c40 <__sinit>
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <_fflush_r+0x6c>)
 8001b34:	429c      	cmp	r4, r3
 8001b36:	d11b      	bne.n	8001b70 <_fflush_r+0x58>
 8001b38:	686c      	ldr	r4, [r5, #4]
 8001b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ef      	beq.n	8001b22 <_fflush_r+0xa>
 8001b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b44:	07d0      	lsls	r0, r2, #31
 8001b46:	d404      	bmi.n	8001b52 <_fflush_r+0x3a>
 8001b48:	0599      	lsls	r1, r3, #22
 8001b4a:	d402      	bmi.n	8001b52 <_fflush_r+0x3a>
 8001b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b4e:	f000 f915 	bl	8001d7c <__retarget_lock_acquire_recursive>
 8001b52:	4628      	mov	r0, r5
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff ff59 	bl	8001a0c <__sflush_r>
 8001b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b5c:	07da      	lsls	r2, r3, #31
 8001b5e:	4605      	mov	r5, r0
 8001b60:	d4e0      	bmi.n	8001b24 <_fflush_r+0xc>
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	059b      	lsls	r3, r3, #22
 8001b66:	d4dd      	bmi.n	8001b24 <_fflush_r+0xc>
 8001b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b6a:	f000 f908 	bl	8001d7e <__retarget_lock_release_recursive>
 8001b6e:	e7d9      	b.n	8001b24 <_fflush_r+0xc>
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_fflush_r+0x70>)
 8001b72:	429c      	cmp	r4, r3
 8001b74:	d101      	bne.n	8001b7a <_fflush_r+0x62>
 8001b76:	68ac      	ldr	r4, [r5, #8]
 8001b78:	e7df      	b.n	8001b3a <_fflush_r+0x22>
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <_fflush_r+0x74>)
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	bf08      	it	eq
 8001b80:	68ec      	ldreq	r4, [r5, #12]
 8001b82:	e7da      	b.n	8001b3a <_fflush_r+0x22>
 8001b84:	080028a8 	.word	0x080028a8
 8001b88:	080028c8 	.word	0x080028c8
 8001b8c:	08002888 	.word	0x08002888

08001b90 <std>:
 8001b90:	2300      	movs	r3, #0
 8001b92:	b510      	push	{r4, lr}
 8001b94:	4604      	mov	r4, r0
 8001b96:	e9c0 3300 	strd	r3, r3, [r0]
 8001b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b9e:	6083      	str	r3, [r0, #8]
 8001ba0:	8181      	strh	r1, [r0, #12]
 8001ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ba4:	81c2      	strh	r2, [r0, #14]
 8001ba6:	6183      	str	r3, [r0, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	2208      	movs	r2, #8
 8001bac:	305c      	adds	r0, #92	; 0x5c
 8001bae:	f7ff fdd7 	bl	8001760 <memset>
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <std+0x38>)
 8001bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <std+0x3c>)
 8001bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <std+0x40>)
 8001bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <std+0x44>)
 8001bc0:	6224      	str	r4, [r4, #32]
 8001bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08002609 	.word	0x08002609
 8001bcc:	0800262b 	.word	0x0800262b
 8001bd0:	08002663 	.word	0x08002663
 8001bd4:	08002687 	.word	0x08002687

08001bd8 <_cleanup_r>:
 8001bd8:	4901      	ldr	r1, [pc, #4]	; (8001be0 <_cleanup_r+0x8>)
 8001bda:	f000 b8af 	b.w	8001d3c <_fwalk_reent>
 8001bde:	bf00      	nop
 8001be0:	08001b19 	.word	0x08001b19

08001be4 <__sfmoreglue>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	2268      	movs	r2, #104	; 0x68
 8001be8:	1e4d      	subs	r5, r1, #1
 8001bea:	4355      	muls	r5, r2
 8001bec:	460e      	mov	r6, r1
 8001bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bf2:	f000 f997 	bl	8001f24 <_malloc_r>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	b140      	cbz	r0, 8001c0c <__sfmoreglue+0x28>
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8001c00:	300c      	adds	r0, #12
 8001c02:	60a0      	str	r0, [r4, #8]
 8001c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c08:	f7ff fdaa 	bl	8001760 <memset>
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}

08001c10 <__sfp_lock_acquire>:
 8001c10:	4801      	ldr	r0, [pc, #4]	; (8001c18 <__sfp_lock_acquire+0x8>)
 8001c12:	f000 b8b3 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8001c16:	bf00      	nop
 8001c18:	200000cd 	.word	0x200000cd

08001c1c <__sfp_lock_release>:
 8001c1c:	4801      	ldr	r0, [pc, #4]	; (8001c24 <__sfp_lock_release+0x8>)
 8001c1e:	f000 b8ae 	b.w	8001d7e <__retarget_lock_release_recursive>
 8001c22:	bf00      	nop
 8001c24:	200000cd 	.word	0x200000cd

08001c28 <__sinit_lock_acquire>:
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <__sinit_lock_acquire+0x8>)
 8001c2a:	f000 b8a7 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8001c2e:	bf00      	nop
 8001c30:	200000ce 	.word	0x200000ce

08001c34 <__sinit_lock_release>:
 8001c34:	4801      	ldr	r0, [pc, #4]	; (8001c3c <__sinit_lock_release+0x8>)
 8001c36:	f000 b8a2 	b.w	8001d7e <__retarget_lock_release_recursive>
 8001c3a:	bf00      	nop
 8001c3c:	200000ce 	.word	0x200000ce

08001c40 <__sinit>:
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
 8001c44:	f7ff fff0 	bl	8001c28 <__sinit_lock_acquire>
 8001c48:	69a3      	ldr	r3, [r4, #24]
 8001c4a:	b11b      	cbz	r3, 8001c54 <__sinit+0x14>
 8001c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c50:	f7ff bff0 	b.w	8001c34 <__sinit_lock_release>
 8001c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c58:	6523      	str	r3, [r4, #80]	; 0x50
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <__sinit+0x68>)
 8001c5c:	4a13      	ldr	r2, [pc, #76]	; (8001cac <__sinit+0x6c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	bf04      	itt	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	61a3      	streq	r3, [r4, #24]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f000 f820 	bl	8001cb0 <__sfp>
 8001c70:	6060      	str	r0, [r4, #4]
 8001c72:	4620      	mov	r0, r4
 8001c74:	f000 f81c 	bl	8001cb0 <__sfp>
 8001c78:	60a0      	str	r0, [r4, #8]
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f000 f818 	bl	8001cb0 <__sfp>
 8001c80:	2200      	movs	r2, #0
 8001c82:	60e0      	str	r0, [r4, #12]
 8001c84:	2104      	movs	r1, #4
 8001c86:	6860      	ldr	r0, [r4, #4]
 8001c88:	f7ff ff82 	bl	8001b90 <std>
 8001c8c:	68a0      	ldr	r0, [r4, #8]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2109      	movs	r1, #9
 8001c92:	f7ff ff7d 	bl	8001b90 <std>
 8001c96:	68e0      	ldr	r0, [r4, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	2112      	movs	r1, #18
 8001c9c:	f7ff ff78 	bl	8001b90 <std>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61a3      	str	r3, [r4, #24]
 8001ca4:	e7d2      	b.n	8001c4c <__sinit+0xc>
 8001ca6:	bf00      	nop
 8001ca8:	08002884 	.word	0x08002884
 8001cac:	08001bd9 	.word	0x08001bd9

08001cb0 <__sfp>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4607      	mov	r7, r0
 8001cb4:	f7ff ffac 	bl	8001c10 <__sfp_lock_acquire>
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <__sfp+0x84>)
 8001cba:	681e      	ldr	r6, [r3, #0]
 8001cbc:	69b3      	ldr	r3, [r6, #24]
 8001cbe:	b913      	cbnz	r3, 8001cc6 <__sfp+0x16>
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7ff ffbd 	bl	8001c40 <__sinit>
 8001cc6:	3648      	adds	r6, #72	; 0x48
 8001cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	d503      	bpl.n	8001cd8 <__sfp+0x28>
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	b30b      	cbz	r3, 8001d18 <__sfp+0x68>
 8001cd4:	6836      	ldr	r6, [r6, #0]
 8001cd6:	e7f7      	b.n	8001cc8 <__sfp+0x18>
 8001cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cdc:	b9d5      	cbnz	r5, 8001d14 <__sfp+0x64>
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <__sfp+0x88>)
 8001ce0:	60e3      	str	r3, [r4, #12]
 8001ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8001ce8:	f000 f847 	bl	8001d7a <__retarget_lock_init_recursive>
 8001cec:	f7ff ff96 	bl	8001c1c <__sfp_lock_release>
 8001cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001cf8:	6025      	str	r5, [r4, #0]
 8001cfa:	61a5      	str	r5, [r4, #24]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d04:	f7ff fd2c 	bl	8001760 <memset>
 8001d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d10:	4620      	mov	r0, r4
 8001d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d14:	3468      	adds	r4, #104	; 0x68
 8001d16:	e7d9      	b.n	8001ccc <__sfp+0x1c>
 8001d18:	2104      	movs	r1, #4
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	f7ff ff62 	bl	8001be4 <__sfmoreglue>
 8001d20:	4604      	mov	r4, r0
 8001d22:	6030      	str	r0, [r6, #0]
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d1d5      	bne.n	8001cd4 <__sfp+0x24>
 8001d28:	f7ff ff78 	bl	8001c1c <__sfp_lock_release>
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	e7ee      	b.n	8001d10 <__sfp+0x60>
 8001d32:	bf00      	nop
 8001d34:	08002884 	.word	0x08002884
 8001d38:	ffff0001 	.word	0xffff0001

08001d3c <_fwalk_reent>:
 8001d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d40:	4606      	mov	r6, r0
 8001d42:	4688      	mov	r8, r1
 8001d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d48:	2700      	movs	r7, #0
 8001d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8001d52:	d505      	bpl.n	8001d60 <_fwalk_reent+0x24>
 8001d54:	6824      	ldr	r4, [r4, #0]
 8001d56:	2c00      	cmp	r4, #0
 8001d58:	d1f7      	bne.n	8001d4a <_fwalk_reent+0xe>
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d60:	89ab      	ldrh	r3, [r5, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d907      	bls.n	8001d76 <_fwalk_reent+0x3a>
 8001d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	d003      	beq.n	8001d76 <_fwalk_reent+0x3a>
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4630      	mov	r0, r6
 8001d72:	47c0      	blx	r8
 8001d74:	4307      	orrs	r7, r0
 8001d76:	3568      	adds	r5, #104	; 0x68
 8001d78:	e7e9      	b.n	8001d4e <_fwalk_reent+0x12>

08001d7a <__retarget_lock_init_recursive>:
 8001d7a:	4770      	bx	lr

08001d7c <__retarget_lock_acquire_recursive>:
 8001d7c:	4770      	bx	lr

08001d7e <__retarget_lock_release_recursive>:
 8001d7e:	4770      	bx	lr

08001d80 <__swhatbuf_r>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	460e      	mov	r6, r1
 8001d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	b096      	sub	sp, #88	; 0x58
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	da08      	bge.n	8001da4 <__swhatbuf_r+0x24>
 8001d92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	602a      	str	r2, [r5, #0]
 8001d9a:	061a      	lsls	r2, r3, #24
 8001d9c:	d410      	bmi.n	8001dc0 <__swhatbuf_r+0x40>
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	e00e      	b.n	8001dc2 <__swhatbuf_r+0x42>
 8001da4:	466a      	mov	r2, sp
 8001da6:	f000 fc95 	bl	80026d4 <_fstat_r>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	dbf1      	blt.n	8001d92 <__swhatbuf_r+0x12>
 8001dae:	9a01      	ldr	r2, [sp, #4]
 8001db0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001db4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001db8:	425a      	negs	r2, r3
 8001dba:	415a      	adcs	r2, r3
 8001dbc:	602a      	str	r2, [r5, #0]
 8001dbe:	e7ee      	b.n	8001d9e <__swhatbuf_r+0x1e>
 8001dc0:	2340      	movs	r3, #64	; 0x40
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	b016      	add	sp, #88	; 0x58
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dcc <__smakebuf_r>:
 8001dcc:	898b      	ldrh	r3, [r1, #12]
 8001dce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dd0:	079d      	lsls	r5, r3, #30
 8001dd2:	4606      	mov	r6, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	d507      	bpl.n	8001de8 <__smakebuf_r+0x1c>
 8001dd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	6123      	str	r3, [r4, #16]
 8001de0:	2301      	movs	r3, #1
 8001de2:	6163      	str	r3, [r4, #20]
 8001de4:	b002      	add	sp, #8
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	ab01      	add	r3, sp, #4
 8001dea:	466a      	mov	r2, sp
 8001dec:	f7ff ffc8 	bl	8001d80 <__swhatbuf_r>
 8001df0:	9900      	ldr	r1, [sp, #0]
 8001df2:	4605      	mov	r5, r0
 8001df4:	4630      	mov	r0, r6
 8001df6:	f000 f895 	bl	8001f24 <_malloc_r>
 8001dfa:	b948      	cbnz	r0, 8001e10 <__smakebuf_r+0x44>
 8001dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e00:	059a      	lsls	r2, r3, #22
 8001e02:	d4ef      	bmi.n	8001de4 <__smakebuf_r+0x18>
 8001e04:	f023 0303 	bic.w	r3, r3, #3
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	81a3      	strh	r3, [r4, #12]
 8001e0e:	e7e3      	b.n	8001dd8 <__smakebuf_r+0xc>
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <__smakebuf_r+0x7c>)
 8001e12:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e14:	89a3      	ldrh	r3, [r4, #12]
 8001e16:	6020      	str	r0, [r4, #0]
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	9b00      	ldr	r3, [sp, #0]
 8001e20:	6163      	str	r3, [r4, #20]
 8001e22:	9b01      	ldr	r3, [sp, #4]
 8001e24:	6120      	str	r0, [r4, #16]
 8001e26:	b15b      	cbz	r3, 8001e40 <__smakebuf_r+0x74>
 8001e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f000 fc63 	bl	80026f8 <_isatty_r>
 8001e32:	b128      	cbz	r0, 8001e40 <__smakebuf_r+0x74>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	89a0      	ldrh	r0, [r4, #12]
 8001e42:	4305      	orrs	r5, r0
 8001e44:	81a5      	strh	r5, [r4, #12]
 8001e46:	e7cd      	b.n	8001de4 <__smakebuf_r+0x18>
 8001e48:	08001bd9 	.word	0x08001bd9

08001e4c <_free_r>:
 8001e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e4e:	2900      	cmp	r1, #0
 8001e50:	d044      	beq.n	8001edc <_free_r+0x90>
 8001e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e56:	9001      	str	r0, [sp, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8001e5e:	bfb8      	it	lt
 8001e60:	18e4      	addlt	r4, r4, r3
 8001e62:	f000 fc6b 	bl	800273c <__malloc_lock>
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <_free_r+0x94>)
 8001e68:	9801      	ldr	r0, [sp, #4]
 8001e6a:	6813      	ldr	r3, [r2, #0]
 8001e6c:	b933      	cbnz	r3, 8001e7c <_free_r+0x30>
 8001e6e:	6063      	str	r3, [r4, #4]
 8001e70:	6014      	str	r4, [r2, #0]
 8001e72:	b003      	add	sp, #12
 8001e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e78:	f000 bc66 	b.w	8002748 <__malloc_unlock>
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	d908      	bls.n	8001e92 <_free_r+0x46>
 8001e80:	6825      	ldr	r5, [r4, #0]
 8001e82:	1961      	adds	r1, r4, r5
 8001e84:	428b      	cmp	r3, r1
 8001e86:	bf01      	itttt	eq
 8001e88:	6819      	ldreq	r1, [r3, #0]
 8001e8a:	685b      	ldreq	r3, [r3, #4]
 8001e8c:	1949      	addeq	r1, r1, r5
 8001e8e:	6021      	streq	r1, [r4, #0]
 8001e90:	e7ed      	b.n	8001e6e <_free_r+0x22>
 8001e92:	461a      	mov	r2, r3
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b10b      	cbz	r3, 8001e9c <_free_r+0x50>
 8001e98:	42a3      	cmp	r3, r4
 8001e9a:	d9fa      	bls.n	8001e92 <_free_r+0x46>
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	1855      	adds	r5, r2, r1
 8001ea0:	42a5      	cmp	r5, r4
 8001ea2:	d10b      	bne.n	8001ebc <_free_r+0x70>
 8001ea4:	6824      	ldr	r4, [r4, #0]
 8001ea6:	4421      	add	r1, r4
 8001ea8:	1854      	adds	r4, r2, r1
 8001eaa:	42a3      	cmp	r3, r4
 8001eac:	6011      	str	r1, [r2, #0]
 8001eae:	d1e0      	bne.n	8001e72 <_free_r+0x26>
 8001eb0:	681c      	ldr	r4, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	6053      	str	r3, [r2, #4]
 8001eb6:	4421      	add	r1, r4
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	e7da      	b.n	8001e72 <_free_r+0x26>
 8001ebc:	d902      	bls.n	8001ec4 <_free_r+0x78>
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	6003      	str	r3, [r0, #0]
 8001ec2:	e7d6      	b.n	8001e72 <_free_r+0x26>
 8001ec4:	6825      	ldr	r5, [r4, #0]
 8001ec6:	1961      	adds	r1, r4, r5
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	bf04      	itt	eq
 8001ecc:	6819      	ldreq	r1, [r3, #0]
 8001ece:	685b      	ldreq	r3, [r3, #4]
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	bf04      	itt	eq
 8001ed4:	1949      	addeq	r1, r1, r5
 8001ed6:	6021      	streq	r1, [r4, #0]
 8001ed8:	6054      	str	r4, [r2, #4]
 8001eda:	e7ca      	b.n	8001e72 <_free_r+0x26>
 8001edc:	b003      	add	sp, #12
 8001ede:	bd30      	pop	{r4, r5, pc}
 8001ee0:	200000d0 	.word	0x200000d0

08001ee4 <sbrk_aligned>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4e0e      	ldr	r6, [pc, #56]	; (8001f20 <sbrk_aligned+0x3c>)
 8001ee8:	460c      	mov	r4, r1
 8001eea:	6831      	ldr	r1, [r6, #0]
 8001eec:	4605      	mov	r5, r0
 8001eee:	b911      	cbnz	r1, 8001ef6 <sbrk_aligned+0x12>
 8001ef0:	f000 fb7a 	bl	80025e8 <_sbrk_r>
 8001ef4:	6030      	str	r0, [r6, #0]
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f000 fb75 	bl	80025e8 <_sbrk_r>
 8001efe:	1c43      	adds	r3, r0, #1
 8001f00:	d00a      	beq.n	8001f18 <sbrk_aligned+0x34>
 8001f02:	1cc4      	adds	r4, r0, #3
 8001f04:	f024 0403 	bic.w	r4, r4, #3
 8001f08:	42a0      	cmp	r0, r4
 8001f0a:	d007      	beq.n	8001f1c <sbrk_aligned+0x38>
 8001f0c:	1a21      	subs	r1, r4, r0
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f000 fb6a 	bl	80025e8 <_sbrk_r>
 8001f14:	3001      	adds	r0, #1
 8001f16:	d101      	bne.n	8001f1c <sbrk_aligned+0x38>
 8001f18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	200000d4 	.word	0x200000d4

08001f24 <_malloc_r>:
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f28:	1ccd      	adds	r5, r1, #3
 8001f2a:	f025 0503 	bic.w	r5, r5, #3
 8001f2e:	3508      	adds	r5, #8
 8001f30:	2d0c      	cmp	r5, #12
 8001f32:	bf38      	it	cc
 8001f34:	250c      	movcc	r5, #12
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	4607      	mov	r7, r0
 8001f3a:	db01      	blt.n	8001f40 <_malloc_r+0x1c>
 8001f3c:	42a9      	cmp	r1, r5
 8001f3e:	d905      	bls.n	8001f4c <_malloc_r+0x28>
 8001f40:	230c      	movs	r3, #12
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	2600      	movs	r6, #0
 8001f46:	4630      	mov	r0, r6
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f4c:	4e2e      	ldr	r6, [pc, #184]	; (8002008 <_malloc_r+0xe4>)
 8001f4e:	f000 fbf5 	bl	800273c <__malloc_lock>
 8001f52:	6833      	ldr	r3, [r6, #0]
 8001f54:	461c      	mov	r4, r3
 8001f56:	bb34      	cbnz	r4, 8001fa6 <_malloc_r+0x82>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	f7ff ffc2 	bl	8001ee4 <sbrk_aligned>
 8001f60:	1c43      	adds	r3, r0, #1
 8001f62:	4604      	mov	r4, r0
 8001f64:	d14d      	bne.n	8002002 <_malloc_r+0xde>
 8001f66:	6834      	ldr	r4, [r6, #0]
 8001f68:	4626      	mov	r6, r4
 8001f6a:	2e00      	cmp	r6, #0
 8001f6c:	d140      	bne.n	8001ff0 <_malloc_r+0xcc>
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	4631      	mov	r1, r6
 8001f72:	4638      	mov	r0, r7
 8001f74:	eb04 0803 	add.w	r8, r4, r3
 8001f78:	f000 fb36 	bl	80025e8 <_sbrk_r>
 8001f7c:	4580      	cmp	r8, r0
 8001f7e:	d13a      	bne.n	8001ff6 <_malloc_r+0xd2>
 8001f80:	6821      	ldr	r1, [r4, #0]
 8001f82:	3503      	adds	r5, #3
 8001f84:	1a6d      	subs	r5, r5, r1
 8001f86:	f025 0503 	bic.w	r5, r5, #3
 8001f8a:	3508      	adds	r5, #8
 8001f8c:	2d0c      	cmp	r5, #12
 8001f8e:	bf38      	it	cc
 8001f90:	250c      	movcc	r5, #12
 8001f92:	4629      	mov	r1, r5
 8001f94:	4638      	mov	r0, r7
 8001f96:	f7ff ffa5 	bl	8001ee4 <sbrk_aligned>
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	d02b      	beq.n	8001ff6 <_malloc_r+0xd2>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	442b      	add	r3, r5
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	e00e      	b.n	8001fc4 <_malloc_r+0xa0>
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	1b52      	subs	r2, r2, r5
 8001faa:	d41e      	bmi.n	8001fea <_malloc_r+0xc6>
 8001fac:	2a0b      	cmp	r2, #11
 8001fae:	d916      	bls.n	8001fde <_malloc_r+0xba>
 8001fb0:	1961      	adds	r1, r4, r5
 8001fb2:	42a3      	cmp	r3, r4
 8001fb4:	6025      	str	r5, [r4, #0]
 8001fb6:	bf18      	it	ne
 8001fb8:	6059      	strne	r1, [r3, #4]
 8001fba:	6863      	ldr	r3, [r4, #4]
 8001fbc:	bf08      	it	eq
 8001fbe:	6031      	streq	r1, [r6, #0]
 8001fc0:	5162      	str	r2, [r4, r5]
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	4638      	mov	r0, r7
 8001fc6:	f104 060b 	add.w	r6, r4, #11
 8001fca:	f000 fbbd 	bl	8002748 <__malloc_unlock>
 8001fce:	f026 0607 	bic.w	r6, r6, #7
 8001fd2:	1d23      	adds	r3, r4, #4
 8001fd4:	1af2      	subs	r2, r6, r3
 8001fd6:	d0b6      	beq.n	8001f46 <_malloc_r+0x22>
 8001fd8:	1b9b      	subs	r3, r3, r6
 8001fda:	50a3      	str	r3, [r4, r2]
 8001fdc:	e7b3      	b.n	8001f46 <_malloc_r+0x22>
 8001fde:	6862      	ldr	r2, [r4, #4]
 8001fe0:	42a3      	cmp	r3, r4
 8001fe2:	bf0c      	ite	eq
 8001fe4:	6032      	streq	r2, [r6, #0]
 8001fe6:	605a      	strne	r2, [r3, #4]
 8001fe8:	e7ec      	b.n	8001fc4 <_malloc_r+0xa0>
 8001fea:	4623      	mov	r3, r4
 8001fec:	6864      	ldr	r4, [r4, #4]
 8001fee:	e7b2      	b.n	8001f56 <_malloc_r+0x32>
 8001ff0:	4634      	mov	r4, r6
 8001ff2:	6876      	ldr	r6, [r6, #4]
 8001ff4:	e7b9      	b.n	8001f6a <_malloc_r+0x46>
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	f000 fba4 	bl	8002748 <__malloc_unlock>
 8002000:	e7a1      	b.n	8001f46 <_malloc_r+0x22>
 8002002:	6025      	str	r5, [r4, #0]
 8002004:	e7de      	b.n	8001fc4 <_malloc_r+0xa0>
 8002006:	bf00      	nop
 8002008:	200000d0 	.word	0x200000d0

0800200c <__sfputc_r>:
 800200c:	6893      	ldr	r3, [r2, #8]
 800200e:	3b01      	subs	r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	b410      	push	{r4}
 8002014:	6093      	str	r3, [r2, #8]
 8002016:	da08      	bge.n	800202a <__sfputc_r+0x1e>
 8002018:	6994      	ldr	r4, [r2, #24]
 800201a:	42a3      	cmp	r3, r4
 800201c:	db01      	blt.n	8002022 <__sfputc_r+0x16>
 800201e:	290a      	cmp	r1, #10
 8002020:	d103      	bne.n	800202a <__sfputc_r+0x1e>
 8002022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002026:	f7ff bc31 	b.w	800188c <__swbuf_r>
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	1c58      	adds	r0, r3, #1
 800202e:	6010      	str	r0, [r2, #0]
 8002030:	7019      	strb	r1, [r3, #0]
 8002032:	4608      	mov	r0, r1
 8002034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002038:	4770      	bx	lr

0800203a <__sfputs_r>:
 800203a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203c:	4606      	mov	r6, r0
 800203e:	460f      	mov	r7, r1
 8002040:	4614      	mov	r4, r2
 8002042:	18d5      	adds	r5, r2, r3
 8002044:	42ac      	cmp	r4, r5
 8002046:	d101      	bne.n	800204c <__sfputs_r+0x12>
 8002048:	2000      	movs	r0, #0
 800204a:	e007      	b.n	800205c <__sfputs_r+0x22>
 800204c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002050:	463a      	mov	r2, r7
 8002052:	4630      	mov	r0, r6
 8002054:	f7ff ffda 	bl	800200c <__sfputc_r>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d1f3      	bne.n	8002044 <__sfputs_r+0xa>
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002060 <_vfiprintf_r>:
 8002060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002064:	460d      	mov	r5, r1
 8002066:	b09d      	sub	sp, #116	; 0x74
 8002068:	4614      	mov	r4, r2
 800206a:	4698      	mov	r8, r3
 800206c:	4606      	mov	r6, r0
 800206e:	b118      	cbz	r0, 8002078 <_vfiprintf_r+0x18>
 8002070:	6983      	ldr	r3, [r0, #24]
 8002072:	b90b      	cbnz	r3, 8002078 <_vfiprintf_r+0x18>
 8002074:	f7ff fde4 	bl	8001c40 <__sinit>
 8002078:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <_vfiprintf_r+0x240>)
 800207a:	429d      	cmp	r5, r3
 800207c:	d11b      	bne.n	80020b6 <_vfiprintf_r+0x56>
 800207e:	6875      	ldr	r5, [r6, #4]
 8002080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002082:	07d9      	lsls	r1, r3, #31
 8002084:	d405      	bmi.n	8002092 <_vfiprintf_r+0x32>
 8002086:	89ab      	ldrh	r3, [r5, #12]
 8002088:	059a      	lsls	r2, r3, #22
 800208a:	d402      	bmi.n	8002092 <_vfiprintf_r+0x32>
 800208c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800208e:	f7ff fe75 	bl	8001d7c <__retarget_lock_acquire_recursive>
 8002092:	89ab      	ldrh	r3, [r5, #12]
 8002094:	071b      	lsls	r3, r3, #28
 8002096:	d501      	bpl.n	800209c <_vfiprintf_r+0x3c>
 8002098:	692b      	ldr	r3, [r5, #16]
 800209a:	b9eb      	cbnz	r3, 80020d8 <_vfiprintf_r+0x78>
 800209c:	4629      	mov	r1, r5
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff fc46 	bl	8001930 <__swsetup_r>
 80020a4:	b1c0      	cbz	r0, 80020d8 <_vfiprintf_r+0x78>
 80020a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020a8:	07dc      	lsls	r4, r3, #31
 80020aa:	d50e      	bpl.n	80020ca <_vfiprintf_r+0x6a>
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b0:	b01d      	add	sp, #116	; 0x74
 80020b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b6:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <_vfiprintf_r+0x244>)
 80020b8:	429d      	cmp	r5, r3
 80020ba:	d101      	bne.n	80020c0 <_vfiprintf_r+0x60>
 80020bc:	68b5      	ldr	r5, [r6, #8]
 80020be:	e7df      	b.n	8002080 <_vfiprintf_r+0x20>
 80020c0:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <_vfiprintf_r+0x248>)
 80020c2:	429d      	cmp	r5, r3
 80020c4:	bf08      	it	eq
 80020c6:	68f5      	ldreq	r5, [r6, #12]
 80020c8:	e7da      	b.n	8002080 <_vfiprintf_r+0x20>
 80020ca:	89ab      	ldrh	r3, [r5, #12]
 80020cc:	0598      	lsls	r0, r3, #22
 80020ce:	d4ed      	bmi.n	80020ac <_vfiprintf_r+0x4c>
 80020d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d2:	f7ff fe54 	bl	8001d7e <__retarget_lock_release_recursive>
 80020d6:	e7e9      	b.n	80020ac <_vfiprintf_r+0x4c>
 80020d8:	2300      	movs	r3, #0
 80020da:	9309      	str	r3, [sp, #36]	; 0x24
 80020dc:	2320      	movs	r3, #32
 80020de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020e6:	2330      	movs	r3, #48	; 0x30
 80020e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022ac <_vfiprintf_r+0x24c>
 80020ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020f0:	f04f 0901 	mov.w	r9, #1
 80020f4:	4623      	mov	r3, r4
 80020f6:	469a      	mov	sl, r3
 80020f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020fc:	b10a      	cbz	r2, 8002102 <_vfiprintf_r+0xa2>
 80020fe:	2a25      	cmp	r2, #37	; 0x25
 8002100:	d1f9      	bne.n	80020f6 <_vfiprintf_r+0x96>
 8002102:	ebba 0b04 	subs.w	fp, sl, r4
 8002106:	d00b      	beq.n	8002120 <_vfiprintf_r+0xc0>
 8002108:	465b      	mov	r3, fp
 800210a:	4622      	mov	r2, r4
 800210c:	4629      	mov	r1, r5
 800210e:	4630      	mov	r0, r6
 8002110:	f7ff ff93 	bl	800203a <__sfputs_r>
 8002114:	3001      	adds	r0, #1
 8002116:	f000 80aa 	beq.w	800226e <_vfiprintf_r+0x20e>
 800211a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800211c:	445a      	add	r2, fp
 800211e:	9209      	str	r2, [sp, #36]	; 0x24
 8002120:	f89a 3000 	ldrb.w	r3, [sl]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a2 	beq.w	800226e <_vfiprintf_r+0x20e>
 800212a:	2300      	movs	r3, #0
 800212c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002134:	f10a 0a01 	add.w	sl, sl, #1
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	9307      	str	r3, [sp, #28]
 800213c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002140:	931a      	str	r3, [sp, #104]	; 0x68
 8002142:	4654      	mov	r4, sl
 8002144:	2205      	movs	r2, #5
 8002146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800214a:	4858      	ldr	r0, [pc, #352]	; (80022ac <_vfiprintf_r+0x24c>)
 800214c:	f7fe f850 	bl	80001f0 <memchr>
 8002150:	9a04      	ldr	r2, [sp, #16]
 8002152:	b9d8      	cbnz	r0, 800218c <_vfiprintf_r+0x12c>
 8002154:	06d1      	lsls	r1, r2, #27
 8002156:	bf44      	itt	mi
 8002158:	2320      	movmi	r3, #32
 800215a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800215e:	0713      	lsls	r3, r2, #28
 8002160:	bf44      	itt	mi
 8002162:	232b      	movmi	r3, #43	; 0x2b
 8002164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002168:	f89a 3000 	ldrb.w	r3, [sl]
 800216c:	2b2a      	cmp	r3, #42	; 0x2a
 800216e:	d015      	beq.n	800219c <_vfiprintf_r+0x13c>
 8002170:	9a07      	ldr	r2, [sp, #28]
 8002172:	4654      	mov	r4, sl
 8002174:	2000      	movs	r0, #0
 8002176:	f04f 0c0a 	mov.w	ip, #10
 800217a:	4621      	mov	r1, r4
 800217c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002180:	3b30      	subs	r3, #48	; 0x30
 8002182:	2b09      	cmp	r3, #9
 8002184:	d94e      	bls.n	8002224 <_vfiprintf_r+0x1c4>
 8002186:	b1b0      	cbz	r0, 80021b6 <_vfiprintf_r+0x156>
 8002188:	9207      	str	r2, [sp, #28]
 800218a:	e014      	b.n	80021b6 <_vfiprintf_r+0x156>
 800218c:	eba0 0308 	sub.w	r3, r0, r8
 8002190:	fa09 f303 	lsl.w	r3, r9, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	46a2      	mov	sl, r4
 800219a:	e7d2      	b.n	8002142 <_vfiprintf_r+0xe2>
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	1d19      	adds	r1, r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	9103      	str	r1, [sp, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bfbb      	ittet	lt
 80021a8:	425b      	neglt	r3, r3
 80021aa:	f042 0202 	orrlt.w	r2, r2, #2
 80021ae:	9307      	strge	r3, [sp, #28]
 80021b0:	9307      	strlt	r3, [sp, #28]
 80021b2:	bfb8      	it	lt
 80021b4:	9204      	strlt	r2, [sp, #16]
 80021b6:	7823      	ldrb	r3, [r4, #0]
 80021b8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ba:	d10c      	bne.n	80021d6 <_vfiprintf_r+0x176>
 80021bc:	7863      	ldrb	r3, [r4, #1]
 80021be:	2b2a      	cmp	r3, #42	; 0x2a
 80021c0:	d135      	bne.n	800222e <_vfiprintf_r+0x1ce>
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	1d1a      	adds	r2, r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	9203      	str	r2, [sp, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bfb8      	it	lt
 80021ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80021d2:	3402      	adds	r4, #2
 80021d4:	9305      	str	r3, [sp, #20]
 80021d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80022bc <_vfiprintf_r+0x25c>
 80021da:	7821      	ldrb	r1, [r4, #0]
 80021dc:	2203      	movs	r2, #3
 80021de:	4650      	mov	r0, sl
 80021e0:	f7fe f806 	bl	80001f0 <memchr>
 80021e4:	b140      	cbz	r0, 80021f8 <_vfiprintf_r+0x198>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	eba0 000a 	sub.w	r0, r0, sl
 80021ec:	fa03 f000 	lsl.w	r0, r3, r0
 80021f0:	9b04      	ldr	r3, [sp, #16]
 80021f2:	4303      	orrs	r3, r0
 80021f4:	3401      	adds	r4, #1
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021fc:	482c      	ldr	r0, [pc, #176]	; (80022b0 <_vfiprintf_r+0x250>)
 80021fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002202:	2206      	movs	r2, #6
 8002204:	f7fd fff4 	bl	80001f0 <memchr>
 8002208:	2800      	cmp	r0, #0
 800220a:	d03f      	beq.n	800228c <_vfiprintf_r+0x22c>
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <_vfiprintf_r+0x254>)
 800220e:	bb1b      	cbnz	r3, 8002258 <_vfiprintf_r+0x1f8>
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	3307      	adds	r3, #7
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	3308      	adds	r3, #8
 800221a:	9303      	str	r3, [sp, #12]
 800221c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800221e:	443b      	add	r3, r7
 8002220:	9309      	str	r3, [sp, #36]	; 0x24
 8002222:	e767      	b.n	80020f4 <_vfiprintf_r+0x94>
 8002224:	fb0c 3202 	mla	r2, ip, r2, r3
 8002228:	460c      	mov	r4, r1
 800222a:	2001      	movs	r0, #1
 800222c:	e7a5      	b.n	800217a <_vfiprintf_r+0x11a>
 800222e:	2300      	movs	r3, #0
 8002230:	3401      	adds	r4, #1
 8002232:	9305      	str	r3, [sp, #20]
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0c0a 	mov.w	ip, #10
 800223a:	4620      	mov	r0, r4
 800223c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002240:	3a30      	subs	r2, #48	; 0x30
 8002242:	2a09      	cmp	r2, #9
 8002244:	d903      	bls.n	800224e <_vfiprintf_r+0x1ee>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0c5      	beq.n	80021d6 <_vfiprintf_r+0x176>
 800224a:	9105      	str	r1, [sp, #20]
 800224c:	e7c3      	b.n	80021d6 <_vfiprintf_r+0x176>
 800224e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002252:	4604      	mov	r4, r0
 8002254:	2301      	movs	r3, #1
 8002256:	e7f0      	b.n	800223a <_vfiprintf_r+0x1da>
 8002258:	ab03      	add	r3, sp, #12
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	462a      	mov	r2, r5
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <_vfiprintf_r+0x258>)
 8002260:	a904      	add	r1, sp, #16
 8002262:	4630      	mov	r0, r6
 8002264:	f3af 8000 	nop.w
 8002268:	4607      	mov	r7, r0
 800226a:	1c78      	adds	r0, r7, #1
 800226c:	d1d6      	bne.n	800221c <_vfiprintf_r+0x1bc>
 800226e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002270:	07d9      	lsls	r1, r3, #31
 8002272:	d405      	bmi.n	8002280 <_vfiprintf_r+0x220>
 8002274:	89ab      	ldrh	r3, [r5, #12]
 8002276:	059a      	lsls	r2, r3, #22
 8002278:	d402      	bmi.n	8002280 <_vfiprintf_r+0x220>
 800227a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800227c:	f7ff fd7f 	bl	8001d7e <__retarget_lock_release_recursive>
 8002280:	89ab      	ldrh	r3, [r5, #12]
 8002282:	065b      	lsls	r3, r3, #25
 8002284:	f53f af12 	bmi.w	80020ac <_vfiprintf_r+0x4c>
 8002288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800228a:	e711      	b.n	80020b0 <_vfiprintf_r+0x50>
 800228c:	ab03      	add	r3, sp, #12
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	462a      	mov	r2, r5
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <_vfiprintf_r+0x258>)
 8002294:	a904      	add	r1, sp, #16
 8002296:	4630      	mov	r0, r6
 8002298:	f000 f880 	bl	800239c <_printf_i>
 800229c:	e7e4      	b.n	8002268 <_vfiprintf_r+0x208>
 800229e:	bf00      	nop
 80022a0:	080028a8 	.word	0x080028a8
 80022a4:	080028c8 	.word	0x080028c8
 80022a8:	08002888 	.word	0x08002888
 80022ac:	080028e8 	.word	0x080028e8
 80022b0:	080028f2 	.word	0x080028f2
 80022b4:	00000000 	.word	0x00000000
 80022b8:	0800203b 	.word	0x0800203b
 80022bc:	080028ee 	.word	0x080028ee

080022c0 <_printf_common>:
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	4616      	mov	r6, r2
 80022c6:	4699      	mov	r9, r3
 80022c8:	688a      	ldr	r2, [r1, #8]
 80022ca:	690b      	ldr	r3, [r1, #16]
 80022cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bfb8      	it	lt
 80022d4:	4613      	movlt	r3, r2
 80022d6:	6033      	str	r3, [r6, #0]
 80022d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022dc:	4607      	mov	r7, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	b10a      	cbz	r2, 80022e6 <_printf_common+0x26>
 80022e2:	3301      	adds	r3, #1
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	0699      	lsls	r1, r3, #26
 80022ea:	bf42      	ittt	mi
 80022ec:	6833      	ldrmi	r3, [r6, #0]
 80022ee:	3302      	addmi	r3, #2
 80022f0:	6033      	strmi	r3, [r6, #0]
 80022f2:	6825      	ldr	r5, [r4, #0]
 80022f4:	f015 0506 	ands.w	r5, r5, #6
 80022f8:	d106      	bne.n	8002308 <_printf_common+0x48>
 80022fa:	f104 0a19 	add.w	sl, r4, #25
 80022fe:	68e3      	ldr	r3, [r4, #12]
 8002300:	6832      	ldr	r2, [r6, #0]
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	42ab      	cmp	r3, r5
 8002306:	dc26      	bgt.n	8002356 <_printf_common+0x96>
 8002308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800230c:	1e13      	subs	r3, r2, #0
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	bf18      	it	ne
 8002312:	2301      	movne	r3, #1
 8002314:	0692      	lsls	r2, r2, #26
 8002316:	d42b      	bmi.n	8002370 <_printf_common+0xb0>
 8002318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800231c:	4649      	mov	r1, r9
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d01e      	beq.n	8002364 <_printf_common+0xa4>
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	68e5      	ldr	r5, [r4, #12]
 800232a:	6832      	ldr	r2, [r6, #0]
 800232c:	f003 0306 	and.w	r3, r3, #6
 8002330:	2b04      	cmp	r3, #4
 8002332:	bf08      	it	eq
 8002334:	1aad      	subeq	r5, r5, r2
 8002336:	68a3      	ldr	r3, [r4, #8]
 8002338:	6922      	ldr	r2, [r4, #16]
 800233a:	bf0c      	ite	eq
 800233c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002340:	2500      	movne	r5, #0
 8002342:	4293      	cmp	r3, r2
 8002344:	bfc4      	itt	gt
 8002346:	1a9b      	subgt	r3, r3, r2
 8002348:	18ed      	addgt	r5, r5, r3
 800234a:	2600      	movs	r6, #0
 800234c:	341a      	adds	r4, #26
 800234e:	42b5      	cmp	r5, r6
 8002350:	d11a      	bne.n	8002388 <_printf_common+0xc8>
 8002352:	2000      	movs	r0, #0
 8002354:	e008      	b.n	8002368 <_printf_common+0xa8>
 8002356:	2301      	movs	r3, #1
 8002358:	4652      	mov	r2, sl
 800235a:	4649      	mov	r1, r9
 800235c:	4638      	mov	r0, r7
 800235e:	47c0      	blx	r8
 8002360:	3001      	adds	r0, #1
 8002362:	d103      	bne.n	800236c <_printf_common+0xac>
 8002364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236c:	3501      	adds	r5, #1
 800236e:	e7c6      	b.n	80022fe <_printf_common+0x3e>
 8002370:	18e1      	adds	r1, r4, r3
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	2030      	movs	r0, #48	; 0x30
 8002376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800237a:	4422      	add	r2, r4
 800237c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002384:	3302      	adds	r3, #2
 8002386:	e7c7      	b.n	8002318 <_printf_common+0x58>
 8002388:	2301      	movs	r3, #1
 800238a:	4622      	mov	r2, r4
 800238c:	4649      	mov	r1, r9
 800238e:	4638      	mov	r0, r7
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d0e6      	beq.n	8002364 <_printf_common+0xa4>
 8002396:	3601      	adds	r6, #1
 8002398:	e7d9      	b.n	800234e <_printf_common+0x8e>
	...

0800239c <_printf_i>:
 800239c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023a0:	7e0f      	ldrb	r7, [r1, #24]
 80023a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023a4:	2f78      	cmp	r7, #120	; 0x78
 80023a6:	4691      	mov	r9, r2
 80023a8:	4680      	mov	r8, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	469a      	mov	sl, r3
 80023ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023b2:	d807      	bhi.n	80023c4 <_printf_i+0x28>
 80023b4:	2f62      	cmp	r7, #98	; 0x62
 80023b6:	d80a      	bhi.n	80023ce <_printf_i+0x32>
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	f000 80d8 	beq.w	800256e <_printf_i+0x1d2>
 80023be:	2f58      	cmp	r7, #88	; 0x58
 80023c0:	f000 80a3 	beq.w	800250a <_printf_i+0x16e>
 80023c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023cc:	e03a      	b.n	8002444 <_printf_i+0xa8>
 80023ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023d2:	2b15      	cmp	r3, #21
 80023d4:	d8f6      	bhi.n	80023c4 <_printf_i+0x28>
 80023d6:	a101      	add	r1, pc, #4	; (adr r1, 80023dc <_printf_i+0x40>)
 80023d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023dc:	08002435 	.word	0x08002435
 80023e0:	08002449 	.word	0x08002449
 80023e4:	080023c5 	.word	0x080023c5
 80023e8:	080023c5 	.word	0x080023c5
 80023ec:	080023c5 	.word	0x080023c5
 80023f0:	080023c5 	.word	0x080023c5
 80023f4:	08002449 	.word	0x08002449
 80023f8:	080023c5 	.word	0x080023c5
 80023fc:	080023c5 	.word	0x080023c5
 8002400:	080023c5 	.word	0x080023c5
 8002404:	080023c5 	.word	0x080023c5
 8002408:	08002555 	.word	0x08002555
 800240c:	08002479 	.word	0x08002479
 8002410:	08002537 	.word	0x08002537
 8002414:	080023c5 	.word	0x080023c5
 8002418:	080023c5 	.word	0x080023c5
 800241c:	08002577 	.word	0x08002577
 8002420:	080023c5 	.word	0x080023c5
 8002424:	08002479 	.word	0x08002479
 8002428:	080023c5 	.word	0x080023c5
 800242c:	080023c5 	.word	0x080023c5
 8002430:	0800253f 	.word	0x0800253f
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	602a      	str	r2, [r5, #0]
 800243c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002444:	2301      	movs	r3, #1
 8002446:	e0a3      	b.n	8002590 <_printf_i+0x1f4>
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	6829      	ldr	r1, [r5, #0]
 800244c:	0606      	lsls	r6, r0, #24
 800244e:	f101 0304 	add.w	r3, r1, #4
 8002452:	d50a      	bpl.n	800246a <_printf_i+0xce>
 8002454:	680e      	ldr	r6, [r1, #0]
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	2e00      	cmp	r6, #0
 800245a:	da03      	bge.n	8002464 <_printf_i+0xc8>
 800245c:	232d      	movs	r3, #45	; 0x2d
 800245e:	4276      	negs	r6, r6
 8002460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002464:	485e      	ldr	r0, [pc, #376]	; (80025e0 <_printf_i+0x244>)
 8002466:	230a      	movs	r3, #10
 8002468:	e019      	b.n	800249e <_printf_i+0x102>
 800246a:	680e      	ldr	r6, [r1, #0]
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002472:	bf18      	it	ne
 8002474:	b236      	sxthne	r6, r6
 8002476:	e7ef      	b.n	8002458 <_printf_i+0xbc>
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	1d19      	adds	r1, r3, #4
 800247e:	6029      	str	r1, [r5, #0]
 8002480:	0601      	lsls	r1, r0, #24
 8002482:	d501      	bpl.n	8002488 <_printf_i+0xec>
 8002484:	681e      	ldr	r6, [r3, #0]
 8002486:	e002      	b.n	800248e <_printf_i+0xf2>
 8002488:	0646      	lsls	r6, r0, #25
 800248a:	d5fb      	bpl.n	8002484 <_printf_i+0xe8>
 800248c:	881e      	ldrh	r6, [r3, #0]
 800248e:	4854      	ldr	r0, [pc, #336]	; (80025e0 <_printf_i+0x244>)
 8002490:	2f6f      	cmp	r7, #111	; 0x6f
 8002492:	bf0c      	ite	eq
 8002494:	2308      	moveq	r3, #8
 8002496:	230a      	movne	r3, #10
 8002498:	2100      	movs	r1, #0
 800249a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800249e:	6865      	ldr	r5, [r4, #4]
 80024a0:	60a5      	str	r5, [r4, #8]
 80024a2:	2d00      	cmp	r5, #0
 80024a4:	bfa2      	ittt	ge
 80024a6:	6821      	ldrge	r1, [r4, #0]
 80024a8:	f021 0104 	bicge.w	r1, r1, #4
 80024ac:	6021      	strge	r1, [r4, #0]
 80024ae:	b90e      	cbnz	r6, 80024b4 <_printf_i+0x118>
 80024b0:	2d00      	cmp	r5, #0
 80024b2:	d04d      	beq.n	8002550 <_printf_i+0x1b4>
 80024b4:	4615      	mov	r5, r2
 80024b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80024ba:	fb03 6711 	mls	r7, r3, r1, r6
 80024be:	5dc7      	ldrb	r7, [r0, r7]
 80024c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024c4:	4637      	mov	r7, r6
 80024c6:	42bb      	cmp	r3, r7
 80024c8:	460e      	mov	r6, r1
 80024ca:	d9f4      	bls.n	80024b6 <_printf_i+0x11a>
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d10b      	bne.n	80024e8 <_printf_i+0x14c>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	07de      	lsls	r6, r3, #31
 80024d4:	d508      	bpl.n	80024e8 <_printf_i+0x14c>
 80024d6:	6923      	ldr	r3, [r4, #16]
 80024d8:	6861      	ldr	r1, [r4, #4]
 80024da:	4299      	cmp	r1, r3
 80024dc:	bfde      	ittt	le
 80024de:	2330      	movle	r3, #48	; 0x30
 80024e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80024e8:	1b52      	subs	r2, r2, r5
 80024ea:	6122      	str	r2, [r4, #16]
 80024ec:	f8cd a000 	str.w	sl, [sp]
 80024f0:	464b      	mov	r3, r9
 80024f2:	aa03      	add	r2, sp, #12
 80024f4:	4621      	mov	r1, r4
 80024f6:	4640      	mov	r0, r8
 80024f8:	f7ff fee2 	bl	80022c0 <_printf_common>
 80024fc:	3001      	adds	r0, #1
 80024fe:	d14c      	bne.n	800259a <_printf_i+0x1fe>
 8002500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002504:	b004      	add	sp, #16
 8002506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250a:	4835      	ldr	r0, [pc, #212]	; (80025e0 <_printf_i+0x244>)
 800250c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002510:	6829      	ldr	r1, [r5, #0]
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	f851 6b04 	ldr.w	r6, [r1], #4
 8002518:	6029      	str	r1, [r5, #0]
 800251a:	061d      	lsls	r5, r3, #24
 800251c:	d514      	bpl.n	8002548 <_printf_i+0x1ac>
 800251e:	07df      	lsls	r7, r3, #31
 8002520:	bf44      	itt	mi
 8002522:	f043 0320 	orrmi.w	r3, r3, #32
 8002526:	6023      	strmi	r3, [r4, #0]
 8002528:	b91e      	cbnz	r6, 8002532 <_printf_i+0x196>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	f023 0320 	bic.w	r3, r3, #32
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	2310      	movs	r3, #16
 8002534:	e7b0      	b.n	8002498 <_printf_i+0xfc>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	f043 0320 	orr.w	r3, r3, #32
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	2378      	movs	r3, #120	; 0x78
 8002540:	4828      	ldr	r0, [pc, #160]	; (80025e4 <_printf_i+0x248>)
 8002542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002546:	e7e3      	b.n	8002510 <_printf_i+0x174>
 8002548:	0659      	lsls	r1, r3, #25
 800254a:	bf48      	it	mi
 800254c:	b2b6      	uxthmi	r6, r6
 800254e:	e7e6      	b.n	800251e <_printf_i+0x182>
 8002550:	4615      	mov	r5, r2
 8002552:	e7bb      	b.n	80024cc <_printf_i+0x130>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	6826      	ldr	r6, [r4, #0]
 8002558:	6961      	ldr	r1, [r4, #20]
 800255a:	1d18      	adds	r0, r3, #4
 800255c:	6028      	str	r0, [r5, #0]
 800255e:	0635      	lsls	r5, r6, #24
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	d501      	bpl.n	8002568 <_printf_i+0x1cc>
 8002564:	6019      	str	r1, [r3, #0]
 8002566:	e002      	b.n	800256e <_printf_i+0x1d2>
 8002568:	0670      	lsls	r0, r6, #25
 800256a:	d5fb      	bpl.n	8002564 <_printf_i+0x1c8>
 800256c:	8019      	strh	r1, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	6123      	str	r3, [r4, #16]
 8002572:	4615      	mov	r5, r2
 8002574:	e7ba      	b.n	80024ec <_printf_i+0x150>
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	602a      	str	r2, [r5, #0]
 800257c:	681d      	ldr	r5, [r3, #0]
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	2100      	movs	r1, #0
 8002582:	4628      	mov	r0, r5
 8002584:	f7fd fe34 	bl	80001f0 <memchr>
 8002588:	b108      	cbz	r0, 800258e <_printf_i+0x1f2>
 800258a:	1b40      	subs	r0, r0, r5
 800258c:	6060      	str	r0, [r4, #4]
 800258e:	6863      	ldr	r3, [r4, #4]
 8002590:	6123      	str	r3, [r4, #16]
 8002592:	2300      	movs	r3, #0
 8002594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002598:	e7a8      	b.n	80024ec <_printf_i+0x150>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	462a      	mov	r2, r5
 800259e:	4649      	mov	r1, r9
 80025a0:	4640      	mov	r0, r8
 80025a2:	47d0      	blx	sl
 80025a4:	3001      	adds	r0, #1
 80025a6:	d0ab      	beq.n	8002500 <_printf_i+0x164>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	079b      	lsls	r3, r3, #30
 80025ac:	d413      	bmi.n	80025d6 <_printf_i+0x23a>
 80025ae:	68e0      	ldr	r0, [r4, #12]
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4298      	cmp	r0, r3
 80025b4:	bfb8      	it	lt
 80025b6:	4618      	movlt	r0, r3
 80025b8:	e7a4      	b.n	8002504 <_printf_i+0x168>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4632      	mov	r2, r6
 80025be:	4649      	mov	r1, r9
 80025c0:	4640      	mov	r0, r8
 80025c2:	47d0      	blx	sl
 80025c4:	3001      	adds	r0, #1
 80025c6:	d09b      	beq.n	8002500 <_printf_i+0x164>
 80025c8:	3501      	adds	r5, #1
 80025ca:	68e3      	ldr	r3, [r4, #12]
 80025cc:	9903      	ldr	r1, [sp, #12]
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	dcf2      	bgt.n	80025ba <_printf_i+0x21e>
 80025d4:	e7eb      	b.n	80025ae <_printf_i+0x212>
 80025d6:	2500      	movs	r5, #0
 80025d8:	f104 0619 	add.w	r6, r4, #25
 80025dc:	e7f5      	b.n	80025ca <_printf_i+0x22e>
 80025de:	bf00      	nop
 80025e0:	080028f9 	.word	0x080028f9
 80025e4:	0800290a 	.word	0x0800290a

080025e8 <_sbrk_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	4d06      	ldr	r5, [pc, #24]	; (8002604 <_sbrk_r+0x1c>)
 80025ec:	2300      	movs	r3, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	602b      	str	r3, [r5, #0]
 80025f4:	f7fe f888 	bl	8000708 <_sbrk>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d102      	bne.n	8002602 <_sbrk_r+0x1a>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	b103      	cbz	r3, 8002602 <_sbrk_r+0x1a>
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	200000d8 	.word	0x200000d8

08002608 <__sread>:
 8002608:	b510      	push	{r4, lr}
 800260a:	460c      	mov	r4, r1
 800260c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002610:	f000 f8a0 	bl	8002754 <_read_r>
 8002614:	2800      	cmp	r0, #0
 8002616:	bfab      	itete	ge
 8002618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800261a:	89a3      	ldrhlt	r3, [r4, #12]
 800261c:	181b      	addge	r3, r3, r0
 800261e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002622:	bfac      	ite	ge
 8002624:	6563      	strge	r3, [r4, #84]	; 0x54
 8002626:	81a3      	strhlt	r3, [r4, #12]
 8002628:	bd10      	pop	{r4, pc}

0800262a <__swrite>:
 800262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800262e:	461f      	mov	r7, r3
 8002630:	898b      	ldrh	r3, [r1, #12]
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	4605      	mov	r5, r0
 8002636:	460c      	mov	r4, r1
 8002638:	4616      	mov	r6, r2
 800263a:	d505      	bpl.n	8002648 <__swrite+0x1e>
 800263c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002640:	2302      	movs	r3, #2
 8002642:	2200      	movs	r2, #0
 8002644:	f000 f868 	bl	8002718 <_lseek_r>
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800264e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002652:	81a3      	strh	r3, [r4, #12]
 8002654:	4632      	mov	r2, r6
 8002656:	463b      	mov	r3, r7
 8002658:	4628      	mov	r0, r5
 800265a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800265e:	f000 b817 	b.w	8002690 <_write_r>

08002662 <__sseek>:
 8002662:	b510      	push	{r4, lr}
 8002664:	460c      	mov	r4, r1
 8002666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800266a:	f000 f855 	bl	8002718 <_lseek_r>
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	bf15      	itete	ne
 8002674:	6560      	strne	r0, [r4, #84]	; 0x54
 8002676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800267a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800267e:	81a3      	strheq	r3, [r4, #12]
 8002680:	bf18      	it	ne
 8002682:	81a3      	strhne	r3, [r4, #12]
 8002684:	bd10      	pop	{r4, pc}

08002686 <__sclose>:
 8002686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268a:	f000 b813 	b.w	80026b4 <_close_r>
	...

08002690 <_write_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d07      	ldr	r5, [pc, #28]	; (80026b0 <_write_r+0x20>)
 8002694:	4604      	mov	r4, r0
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	2200      	movs	r2, #0
 800269c:	602a      	str	r2, [r5, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	f7fd ffe1 	bl	8000666 <_write>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d102      	bne.n	80026ae <_write_r+0x1e>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	b103      	cbz	r3, 80026ae <_write_r+0x1e>
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	200000d8 	.word	0x200000d8

080026b4 <_close_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	4d06      	ldr	r5, [pc, #24]	; (80026d0 <_close_r+0x1c>)
 80026b8:	2300      	movs	r3, #0
 80026ba:	4604      	mov	r4, r0
 80026bc:	4608      	mov	r0, r1
 80026be:	602b      	str	r3, [r5, #0]
 80026c0:	f7fd ffed 	bl	800069e <_close>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d102      	bne.n	80026ce <_close_r+0x1a>
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	b103      	cbz	r3, 80026ce <_close_r+0x1a>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	200000d8 	.word	0x200000d8

080026d4 <_fstat_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4d07      	ldr	r5, [pc, #28]	; (80026f4 <_fstat_r+0x20>)
 80026d8:	2300      	movs	r3, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	602b      	str	r3, [r5, #0]
 80026e2:	f7fd ffe8 	bl	80006b6 <_fstat>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	d102      	bne.n	80026f0 <_fstat_r+0x1c>
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	b103      	cbz	r3, 80026f0 <_fstat_r+0x1c>
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	bd38      	pop	{r3, r4, r5, pc}
 80026f2:	bf00      	nop
 80026f4:	200000d8 	.word	0x200000d8

080026f8 <_isatty_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4d06      	ldr	r5, [pc, #24]	; (8002714 <_isatty_r+0x1c>)
 80026fc:	2300      	movs	r3, #0
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fd ffe7 	bl	80006d6 <_isatty>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_isatty_r+0x1a>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_isatty_r+0x1a>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	200000d8 	.word	0x200000d8

08002718 <_lseek_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4d07      	ldr	r5, [pc, #28]	; (8002738 <_lseek_r+0x20>)
 800271c:	4604      	mov	r4, r0
 800271e:	4608      	mov	r0, r1
 8002720:	4611      	mov	r1, r2
 8002722:	2200      	movs	r2, #0
 8002724:	602a      	str	r2, [r5, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f7fd ffe0 	bl	80006ec <_lseek>
 800272c:	1c43      	adds	r3, r0, #1
 800272e:	d102      	bne.n	8002736 <_lseek_r+0x1e>
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	b103      	cbz	r3, 8002736 <_lseek_r+0x1e>
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	200000d8 	.word	0x200000d8

0800273c <__malloc_lock>:
 800273c:	4801      	ldr	r0, [pc, #4]	; (8002744 <__malloc_lock+0x8>)
 800273e:	f7ff bb1d 	b.w	8001d7c <__retarget_lock_acquire_recursive>
 8002742:	bf00      	nop
 8002744:	200000cc 	.word	0x200000cc

08002748 <__malloc_unlock>:
 8002748:	4801      	ldr	r0, [pc, #4]	; (8002750 <__malloc_unlock+0x8>)
 800274a:	f7ff bb18 	b.w	8001d7e <__retarget_lock_release_recursive>
 800274e:	bf00      	nop
 8002750:	200000cc 	.word	0x200000cc

08002754 <_read_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4d07      	ldr	r5, [pc, #28]	; (8002774 <_read_r+0x20>)
 8002758:	4604      	mov	r4, r0
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	2200      	movs	r2, #0
 8002760:	602a      	str	r2, [r5, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	f7fd ff62 	bl	800062c <_read>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d102      	bne.n	8002772 <_read_r+0x1e>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <_read_r+0x1e>
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	200000d8 	.word	0x200000d8

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
